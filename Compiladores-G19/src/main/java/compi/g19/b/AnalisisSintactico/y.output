   0  $accept : programa $end

   1  programa : ID BEGIN list_sentencias END
   2           | BEGIN list_sentencias END
   3           | ID BEGIN list_sentencias
   4           | ID list_sentencias END
   5           | ID list_sentencias

   6  list_sentencias : list_sentencias sentencia
   7                  | sentencia

   8  sentencia : sentencia_declarativa ';'
   9            | sentencia_ejecutable ';'
  10            | sentencia_ejecutable
  11            | sentencia_declarativa

  12  sentencia_declarativa : tipo list_variables
  13                        | declaracion_funcion
  14                        | declaracion_tipo

  15  sentencia_ejecutable : asignacion
  16                       | invocacion_funcion
  17                       | bloque_if
  18                       | salida_mensaje
  19                       | sentencia_control

  20  sentencia_control : FOR '(' encabezado_for ')' bloque_sentencias_ejecutables
  21                    | FOR '(' encabezado_for ')' error
  22                    | FOR encabezado_for ')' bloque_sentencias_ejecutables
  23                    | FOR '(' encabezado_for bloque_sentencias_ejecutables

  24  encabezado_for : encabezado_for1
  25                 | encabezado_for2

  26  encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE
  27                  | ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE
  28                  | ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE
  29                  | ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE
  30                  | ID ASIGNACION CONSTANTE ';' condicion ';' up_down

  31  encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE ';' '(' condicion ')'
  32                  | ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE ';' '(' condicion ')'
  33                  | ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE ';' '(' condicion ')'
  34                  | ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE ';' '(' condicion ')'
  35                  | ID ASIGNACION CONSTANTE ';' condicion ';' up_down '(' condicion ')'

  36  up_down : UP
  37          | DOWN

  38  asignacion : ID ASIGNACION expresion
  39             | ID '[' CONSTANTE ']' ASIGNACION expresion
  40             | ID ASIGNACION error

  41  tipo : tipo_base
  42       | ID

  43  tipo_base : ULONGINT
  44            | SINGLE

  45  list_variables : list_variables ',' ID
  46                 | ID

  47  $$1 :

  48  $$2 :

  49  declaracion_funcion : tipo FUN ID '(' parametro ')' BEGIN $$1 cuerpo_funcion $$2 END
  50                      | tipo FUN ID '(' bloque_list_parametro ')' BEGIN cuerpo_funcion END
  51                      | tipo FUN '(' parametro ')' BEGIN cuerpo_funcion END
  52                      | tipo FUN '(' parametro ')' BEGIN END
  53                      | tipo FUN ID '(' ')' BEGIN cuerpo_funcion END

  54  parametro : tipo ID
  55            | ID

  56  bloque_list_parametro : list_parametro ',' parametro

  57  list_parametro : parametro
  58                 | list_parametro ',' parametro

  59  cuerpo_funcion : list_sentencias_funcion sentencia_return ';'
  60                 | list_sentencias_funcion
  61                 | sentencia_return ';'

  62  list_sentencias_funcion : list_sentencias_funcion sentencia
  63                          | sentencia

  64  sentencia_return : RET '(' expresion ')'

  65  expresion : expresion '+' termino
  66            | expresion '-' termino
  67            | termino
  68            | expresion '+' error
  69            | expresion '-' error

  70  termino : termino '*' factor
  71          | termino '/' factor
  72          | factor
  73          | termino '*' error
  74          | termino '/' error

  75  factor : ID
  76         | CONSTANTE
  77         | invocacion_funcion
  78         | ID '[' CONSTANTE ']'
  79         | '-' ID
  80         | '-' CONSTANTE
  81         | '-' ID '[' CONSTANTE ']'

  82  declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base '>' ID
  83                   | TYPEDEF TRIPLE '<' tipo_base '>' error
  84                   | TYPEDEF TRIPLE tipo_base '>' ID
  85                   | TYPEDEF TRIPLE '<' tipo_base ID
  86                   | TYPEDEF TRIPLE tipo_base ID
  87                   | TYPEDEF '<' tipo_base '>' ID

  88  invocacion_funcion : ID '(' expresion ')'
  89                     | ID '(' bloque_list_expresiones ')'
  90                     | ID '(' ')'
  91                     | ID '(' tipo_base '(' expresion ')' ')'

  92  fin_if : END_IF
  93         | error

  94  bloque_sentencias_ejecutables : sentencia_ejecutable ';'
  95                                | BEGIN list_sentencias_ejecutables END
  96                                | BEGIN error

  97  bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico fin_if
  98            | IF '(' condicion ')' THEN cuerpo_if_bloque fin_if
  99            | IF '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_unico fin_if
 100            | IF '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if
 101            | IF '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_bloque fin_if
 102            | IF '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_unico fin_if

 103  cuerpo_if_unico : sentencia_ejecutable ';'
 104                  | sentencia_return ';'

 105  cuerpo_if_bloque : BEGIN list_sentencias_ejecutables END
 106                   | BEGIN error
 107                   | list_sentencias_ejecutables END
 108                   | error

 109  list_sentencias_ejecutables : list_sentencias_ejecutables sentencia_ejecutable ';'
 110                              | sentencia_ejecutable ';'

 111  comparacion : MAYORIGUAL
 112              | MENORIGUAL
 113              | DISTINTO
 114              | '='
 115              | '>'
 116              | '<'

 117  condicion : expresion comparacion expresion
 118            | '(' bloque_list_expresiones ')' comparacion '(' bloque_list_expresiones ')'
 119            | error

 120  bloque_list_expresiones : list_expresiones ',' expresion

 121  list_expresiones : list_expresiones ',' expresion
 122                   | expresion
 123                   | error

 124  salida_mensaje : OUTF '(' CADENA ')'
 125                 | OUTF '(' expresion ')'
 126                 | OUTF '(' ')'

state 0
	$accept : . programa $end  (0)

	ID  shift 1
	BEGIN  shift 2
	.  error

	programa  goto 3


state 1
	programa : ID . BEGIN list_sentencias END  (1)
	programa : ID . BEGIN list_sentencias  (3)
	programa : ID . list_sentencias END  (4)
	programa : ID . list_sentencias  (5)

	ID  shift 4
	IF  shift 5
	BEGIN  shift 6
	OUTF  shift 7
	TYPEDEF  shift 8
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	list_sentencias  goto 12
	sentencia  goto 13
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24


state 2
	programa : BEGIN . list_sentencias END  (2)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	list_sentencias  goto 25
	sentencia  goto 13
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24


state 3
	$accept : programa . $end  (0)

	$end  accept


state 4
	asignacion : ID . ASIGNACION expresion  (38)
	asignacion : ID . '[' CONSTANTE ']' ASIGNACION expresion  (39)
	asignacion : ID . ASIGNACION error  (40)
	tipo : ID .  (42)
	invocacion_funcion : ID . '(' expresion ')'  (88)
	invocacion_funcion : ID . '(' bloque_list_expresiones ')'  (89)
	invocacion_funcion : ID . '(' ')'  (90)
	invocacion_funcion : ID . '(' tipo_base '(' expresion ')' ')'  (91)

	ASIGNACION  shift 26
	'('  shift 27
	'['  shift 28
	ID  reduce 42
	FUN  reduce 42


state 5
	bloque_if : IF . '(' condicion ')' THEN cuerpo_if_unico fin_if  (97)
	bloque_if : IF . '(' condicion ')' THEN cuerpo_if_bloque fin_if  (98)
	bloque_if : IF . '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_unico fin_if  (99)
	bloque_if : IF . '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if  (100)
	bloque_if : IF . '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_bloque fin_if  (101)
	bloque_if : IF . '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_unico fin_if  (102)

	'('  shift 29
	.  error


state 6
	programa : ID BEGIN . list_sentencias END  (1)
	programa : ID BEGIN . list_sentencias  (3)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	list_sentencias  goto 30
	sentencia  goto 13
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24


state 7
	salida_mensaje : OUTF . '(' CADENA ')'  (124)
	salida_mensaje : OUTF . '(' expresion ')'  (125)
	salida_mensaje : OUTF . '(' ')'  (126)

	'('  shift 31
	.  error


state 8
	declaracion_tipo : TYPEDEF . TRIPLE '<' tipo_base '>' ID  (82)
	declaracion_tipo : TYPEDEF . TRIPLE '<' tipo_base '>' error  (83)
	declaracion_tipo : TYPEDEF . TRIPLE tipo_base '>' ID  (84)
	declaracion_tipo : TYPEDEF . TRIPLE '<' tipo_base ID  (85)
	declaracion_tipo : TYPEDEF . TRIPLE tipo_base ID  (86)
	declaracion_tipo : TYPEDEF . '<' tipo_base '>' ID  (87)

	TRIPLE  shift 32
	'<'  shift 33
	.  error


state 9
	tipo_base : ULONGINT .  (43)

	.  reduce 43


state 10
	tipo_base : SINGLE .  (44)

	.  reduce 44


state 11
	sentencia_control : FOR . '(' encabezado_for ')' bloque_sentencias_ejecutables  (20)
	sentencia_control : FOR . '(' encabezado_for ')' error  (21)
	sentencia_control : FOR . encabezado_for ')' bloque_sentencias_ejecutables  (22)
	sentencia_control : FOR . '(' encabezado_for bloque_sentencias_ejecutables  (23)

	ID  shift 34
	'('  shift 35
	.  error

	encabezado_for  goto 36
	encabezado_for1  goto 37
	encabezado_for2  goto 38


state 12
	programa : ID list_sentencias . END  (4)
	programa : ID list_sentencias .  (5)
	list_sentencias : list_sentencias . sentencia  (6)

	ID  shift 4
	IF  shift 5
	END  shift 39
	OUTF  shift 7
	TYPEDEF  shift 8
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	$end  reduce 5

	sentencia  goto 40
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24


state 13
	list_sentencias : sentencia .  (7)

	.  reduce 7


state 14
	sentencia : sentencia_declarativa . ';'  (8)
	sentencia : sentencia_declarativa .  (11)

	';'  shift 41
	$end  reduce 11
	ID  reduce 11
	IF  reduce 11
	END  reduce 11
	OUTF  reduce 11
	TYPEDEF  reduce 11
	RET  reduce 11
	ULONGINT  reduce 11
	SINGLE  reduce 11
	FOR  reduce 11


state 15
	sentencia : sentencia_ejecutable . ';'  (9)
	sentencia : sentencia_ejecutable .  (10)

	';'  shift 42
	$end  reduce 10
	ID  reduce 10
	IF  reduce 10
	END  reduce 10
	OUTF  reduce 10
	TYPEDEF  reduce 10
	RET  reduce 10
	ULONGINT  reduce 10
	SINGLE  reduce 10
	FOR  reduce 10


state 16
	sentencia_declarativa : tipo . list_variables  (12)
	declaracion_funcion : tipo . FUN ID '(' parametro ')' BEGIN $$1 cuerpo_funcion $$2 END  (49)
	declaracion_funcion : tipo . FUN ID '(' bloque_list_parametro ')' BEGIN cuerpo_funcion END  (50)
	declaracion_funcion : tipo . FUN '(' parametro ')' BEGIN cuerpo_funcion END  (51)
	declaracion_funcion : tipo . FUN '(' parametro ')' BEGIN END  (52)
	declaracion_funcion : tipo . FUN ID '(' ')' BEGIN cuerpo_funcion END  (53)

	ID  shift 43
	FUN  shift 44
	.  error

	list_variables  goto 45


state 17
	sentencia_declarativa : declaracion_funcion .  (13)

	.  reduce 13


state 18
	sentencia_declarativa : declaracion_tipo .  (14)

	.  reduce 14


state 19
	sentencia_ejecutable : asignacion .  (15)

	.  reduce 15


state 20
	sentencia_ejecutable : invocacion_funcion .  (16)

	.  reduce 16


state 21
	sentencia_ejecutable : bloque_if .  (17)

	.  reduce 17


state 22
	sentencia_ejecutable : salida_mensaje .  (18)

	.  reduce 18


state 23
	sentencia_ejecutable : sentencia_control .  (19)

	.  reduce 19


state 24
	tipo : tipo_base .  (41)

	.  reduce 41


state 25
	programa : BEGIN list_sentencias . END  (2)
	list_sentencias : list_sentencias . sentencia  (6)

	ID  shift 4
	IF  shift 5
	END  shift 46
	OUTF  shift 7
	TYPEDEF  shift 8
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	sentencia  goto 40
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24


state 26
	asignacion : ID ASIGNACION . expresion  (38)
	asignacion : ID ASIGNACION . error  (40)

	error  shift 47
	ID  shift 48
	CONSTANTE  shift 49
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	expresion  goto 52
	termino  goto 53
	factor  goto 54


state 27
	invocacion_funcion : ID '(' . expresion ')'  (88)
	invocacion_funcion : ID '(' . bloque_list_expresiones ')'  (89)
	invocacion_funcion : ID '(' . ')'  (90)
	invocacion_funcion : ID '(' . tipo_base '(' expresion ')' ')'  (91)

	error  shift 55
	ID  shift 48
	CONSTANTE  shift 49
	ULONGINT  shift 9
	SINGLE  shift 10
	')'  shift 56
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	expresion  goto 57
	tipo_base  goto 58
	termino  goto 53
	factor  goto 54
	bloque_list_expresiones  goto 59
	list_expresiones  goto 60


state 28
	asignacion : ID '[' . CONSTANTE ']' ASIGNACION expresion  (39)

	CONSTANTE  shift 61
	.  error


state 29
	bloque_if : IF '(' . condicion ')' THEN cuerpo_if_unico fin_if  (97)
	bloque_if : IF '(' . condicion ')' THEN cuerpo_if_bloque fin_if  (98)
	bloque_if : IF '(' . condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_unico fin_if  (99)
	bloque_if : IF '(' . condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if  (100)
	bloque_if : IF '(' . condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_bloque fin_if  (101)
	bloque_if : IF '(' . condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_unico fin_if  (102)

	error  shift 62
	ID  shift 48
	CONSTANTE  shift 49
	'('  shift 63
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	condicion  goto 64
	expresion  goto 65
	termino  goto 53
	factor  goto 54


state 30
	programa : ID BEGIN list_sentencias . END  (1)
	programa : ID BEGIN list_sentencias .  (3)
	list_sentencias : list_sentencias . sentencia  (6)

	ID  shift 4
	IF  shift 5
	END  shift 66
	OUTF  shift 7
	TYPEDEF  shift 8
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	$end  reduce 3

	sentencia  goto 40
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24


state 31
	salida_mensaje : OUTF '(' . CADENA ')'  (124)
	salida_mensaje : OUTF '(' . expresion ')'  (125)
	salida_mensaje : OUTF '(' . ')'  (126)

	ID  shift 48
	CONSTANTE  shift 49
	CADENA  shift 67
	')'  shift 68
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	expresion  goto 69
	termino  goto 53
	factor  goto 54


state 32
	declaracion_tipo : TYPEDEF TRIPLE . '<' tipo_base '>' ID  (82)
	declaracion_tipo : TYPEDEF TRIPLE . '<' tipo_base '>' error  (83)
	declaracion_tipo : TYPEDEF TRIPLE . tipo_base '>' ID  (84)
	declaracion_tipo : TYPEDEF TRIPLE . '<' tipo_base ID  (85)
	declaracion_tipo : TYPEDEF TRIPLE . tipo_base ID  (86)

	ULONGINT  shift 9
	SINGLE  shift 10
	'<'  shift 70
	.  error

	tipo_base  goto 71


state 33
	declaracion_tipo : TYPEDEF '<' . tipo_base '>' ID  (87)

	ULONGINT  shift 9
	SINGLE  shift 10
	.  error

	tipo_base  goto 72


state 34
	encabezado_for1 : ID . ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE  (26)
	encabezado_for1 : ID . ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE  (27)
	encabezado_for1 : ID . ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE  (28)
	encabezado_for1 : ID . ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE  (29)
	encabezado_for1 : ID . ASIGNACION CONSTANTE ';' condicion ';' up_down  (30)
	encabezado_for2 : ID . ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID . ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE ';' '(' condicion ')'  (32)
	encabezado_for2 : ID . ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (33)
	encabezado_for2 : ID . ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE ';' '(' condicion ')'  (34)
	encabezado_for2 : ID . ASIGNACION CONSTANTE ';' condicion ';' up_down '(' condicion ')'  (35)

	ASIGNACION  shift 73
	.  error


state 35
	sentencia_control : FOR '(' . encabezado_for ')' bloque_sentencias_ejecutables  (20)
	sentencia_control : FOR '(' . encabezado_for ')' error  (21)
	sentencia_control : FOR '(' . encabezado_for bloque_sentencias_ejecutables  (23)

	ID  shift 34
	.  error

	encabezado_for  goto 74
	encabezado_for1  goto 37
	encabezado_for2  goto 38


state 36
	sentencia_control : FOR encabezado_for . ')' bloque_sentencias_ejecutables  (22)

	')'  shift 75
	.  error


state 37
	encabezado_for : encabezado_for1 .  (24)

	.  reduce 24


state 38
	encabezado_for : encabezado_for2 .  (25)

	.  reduce 25


state 39
	programa : ID list_sentencias END .  (4)

	.  reduce 4


state 40
	list_sentencias : list_sentencias sentencia .  (6)

	.  reduce 6


state 41
	sentencia : sentencia_declarativa ';' .  (8)

	.  reduce 8


state 42
	sentencia : sentencia_ejecutable ';' .  (9)

	.  reduce 9


state 43
	list_variables : ID .  (46)

	.  reduce 46


state 44
	declaracion_funcion : tipo FUN . ID '(' parametro ')' BEGIN $$1 cuerpo_funcion $$2 END  (49)
	declaracion_funcion : tipo FUN . ID '(' bloque_list_parametro ')' BEGIN cuerpo_funcion END  (50)
	declaracion_funcion : tipo FUN . '(' parametro ')' BEGIN cuerpo_funcion END  (51)
	declaracion_funcion : tipo FUN . '(' parametro ')' BEGIN END  (52)
	declaracion_funcion : tipo FUN . ID '(' ')' BEGIN cuerpo_funcion END  (53)

	ID  shift 76
	'('  shift 77
	.  error


state 45
	sentencia_declarativa : tipo list_variables .  (12)
	list_variables : list_variables . ',' ID  (45)

	','  shift 78
	$end  reduce 12
	ID  reduce 12
	IF  reduce 12
	END  reduce 12
	OUTF  reduce 12
	TYPEDEF  reduce 12
	RET  reduce 12
	ULONGINT  reduce 12
	SINGLE  reduce 12
	FOR  reduce 12
	';'  reduce 12


state 46
	programa : BEGIN list_sentencias END .  (2)

	.  reduce 2


state 47
	asignacion : ID ASIGNACION error .  (40)

	.  reduce 40


state 48
	factor : ID .  (75)
	factor : ID . '[' CONSTANTE ']'  (78)
	invocacion_funcion : ID . '(' expresion ')'  (88)
	invocacion_funcion : ID . '(' bloque_list_expresiones ')'  (89)
	invocacion_funcion : ID . '(' ')'  (90)
	invocacion_funcion : ID . '(' tipo_base '(' expresion ')' ')'  (91)

	'('  shift 27
	'['  shift 79
	$end  reduce 75
	ID  reduce 75
	MAYORIGUAL  reduce 75
	MENORIGUAL  reduce 75
	DISTINTO  reduce 75
	IF  reduce 75
	END  reduce 75
	OUTF  reduce 75
	TYPEDEF  reduce 75
	RET  reduce 75
	ULONGINT  reduce 75
	SINGLE  reduce 75
	FOR  reduce 75
	UP  reduce 75
	DOWN  reduce 75
	';'  reduce 75
	')'  reduce 75
	','  reduce 75
	'+'  reduce 75
	'-'  reduce 75
	'*'  reduce 75
	'/'  reduce 75
	'<'  reduce 75
	'>'  reduce 75
	'='  reduce 75


state 49
	factor : CONSTANTE .  (76)

	.  reduce 76


state 50
	factor : '-' . ID  (79)
	factor : '-' . CONSTANTE  (80)
	factor : '-' . ID '[' CONSTANTE ']'  (81)

	ID  shift 80
	CONSTANTE  shift 81
	.  error


state 51
	factor : invocacion_funcion .  (77)

	.  reduce 77


state 52
	asignacion : ID ASIGNACION expresion .  (38)
	expresion : expresion . '+' termino  (65)
	expresion : expresion . '-' termino  (66)
	expresion : expresion . '+' error  (68)
	expresion : expresion . '-' error  (69)

	'+'  shift 82
	'-'  shift 83
	$end  reduce 38
	ID  reduce 38
	IF  reduce 38
	END  reduce 38
	OUTF  reduce 38
	TYPEDEF  reduce 38
	RET  reduce 38
	ULONGINT  reduce 38
	SINGLE  reduce 38
	FOR  reduce 38
	';'  reduce 38


state 53
	expresion : termino .  (67)
	termino : termino . '*' factor  (70)
	termino : termino . '/' factor  (71)
	termino : termino . '*' error  (73)
	termino : termino . '/' error  (74)

	'*'  shift 84
	'/'  shift 85
	$end  reduce 67
	ID  reduce 67
	MAYORIGUAL  reduce 67
	MENORIGUAL  reduce 67
	DISTINTO  reduce 67
	IF  reduce 67
	END  reduce 67
	OUTF  reduce 67
	TYPEDEF  reduce 67
	RET  reduce 67
	ULONGINT  reduce 67
	SINGLE  reduce 67
	FOR  reduce 67
	UP  reduce 67
	DOWN  reduce 67
	';'  reduce 67
	')'  reduce 67
	','  reduce 67
	'+'  reduce 67
	'-'  reduce 67
	'<'  reduce 67
	'>'  reduce 67
	'='  reduce 67


state 54
	termino : factor .  (72)

	.  reduce 72


state 55
	list_expresiones : error .  (123)

	.  reduce 123


state 56
	invocacion_funcion : ID '(' ')' .  (90)

	.  reduce 90


state 57
	expresion : expresion . '+' termino  (65)
	expresion : expresion . '-' termino  (66)
	expresion : expresion . '+' error  (68)
	expresion : expresion . '-' error  (69)
	invocacion_funcion : ID '(' expresion . ')'  (88)
	list_expresiones : expresion .  (122)

	')'  shift 86
	'+'  shift 82
	'-'  shift 83
	','  reduce 122


state 58
	invocacion_funcion : ID '(' tipo_base . '(' expresion ')' ')'  (91)

	'('  shift 87
	.  error


state 59
	invocacion_funcion : ID '(' bloque_list_expresiones . ')'  (89)

	')'  shift 88
	.  error


state 60
	bloque_list_expresiones : list_expresiones . ',' expresion  (120)
	list_expresiones : list_expresiones . ',' expresion  (121)

	','  shift 89
	.  error


state 61
	asignacion : ID '[' CONSTANTE . ']' ASIGNACION expresion  (39)

	']'  shift 90
	.  error


state 62
	condicion : error .  (119)

	.  reduce 119


state 63
	condicion : '(' . bloque_list_expresiones ')' comparacion '(' bloque_list_expresiones ')'  (118)

	error  shift 55
	ID  shift 48
	CONSTANTE  shift 49
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	expresion  goto 91
	termino  goto 53
	factor  goto 54
	bloque_list_expresiones  goto 92
	list_expresiones  goto 60


state 64
	bloque_if : IF '(' condicion . ')' THEN cuerpo_if_unico fin_if  (97)
	bloque_if : IF '(' condicion . ')' THEN cuerpo_if_bloque fin_if  (98)
	bloque_if : IF '(' condicion . ')' THEN cuerpo_if_unico ELSE cuerpo_if_unico fin_if  (99)
	bloque_if : IF '(' condicion . ')' THEN cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if  (100)
	bloque_if : IF '(' condicion . ')' THEN cuerpo_if_unico ELSE cuerpo_if_bloque fin_if  (101)
	bloque_if : IF '(' condicion . ')' THEN cuerpo_if_bloque ELSE cuerpo_if_unico fin_if  (102)

	')'  shift 93
	.  error


state 65
	expresion : expresion . '+' termino  (65)
	expresion : expresion . '-' termino  (66)
	expresion : expresion . '+' error  (68)
	expresion : expresion . '-' error  (69)
	condicion : expresion . comparacion expresion  (117)

	MAYORIGUAL  shift 94
	MENORIGUAL  shift 95
	DISTINTO  shift 96
	'+'  shift 82
	'-'  shift 83
	'<'  shift 97
	'>'  shift 98
	'='  shift 99
	.  error

	comparacion  goto 100


state 66
	programa : ID BEGIN list_sentencias END .  (1)

	.  reduce 1


state 67
	salida_mensaje : OUTF '(' CADENA . ')'  (124)

	')'  shift 101
	.  error


state 68
	salida_mensaje : OUTF '(' ')' .  (126)

	.  reduce 126


state 69
	expresion : expresion . '+' termino  (65)
	expresion : expresion . '-' termino  (66)
	expresion : expresion . '+' error  (68)
	expresion : expresion . '-' error  (69)
	salida_mensaje : OUTF '(' expresion . ')'  (125)

	')'  shift 102
	'+'  shift 82
	'-'  shift 83
	.  error


state 70
	declaracion_tipo : TYPEDEF TRIPLE '<' . tipo_base '>' ID  (82)
	declaracion_tipo : TYPEDEF TRIPLE '<' . tipo_base '>' error  (83)
	declaracion_tipo : TYPEDEF TRIPLE '<' . tipo_base ID  (85)

	ULONGINT  shift 9
	SINGLE  shift 10
	.  error

	tipo_base  goto 103


state 71
	declaracion_tipo : TYPEDEF TRIPLE tipo_base . '>' ID  (84)
	declaracion_tipo : TYPEDEF TRIPLE tipo_base . ID  (86)

	ID  shift 104
	'>'  shift 105
	.  error


state 72
	declaracion_tipo : TYPEDEF '<' tipo_base . '>' ID  (87)

	'>'  shift 106
	.  error


state 73
	encabezado_for1 : ID ASIGNACION . CONSTANTE ';' condicion ';' up_down CONSTANTE  (26)
	encabezado_for1 : ID ASIGNACION . CONSTANTE ';' condicion ';' CONSTANTE  (27)
	encabezado_for1 : ID ASIGNACION . CONSTANTE condicion ';' up_down CONSTANTE  (28)
	encabezado_for1 : ID ASIGNACION . CONSTANTE ';' condicion up_down CONSTANTE  (29)
	encabezado_for1 : ID ASIGNACION . CONSTANTE ';' condicion ';' up_down  (30)
	encabezado_for2 : ID ASIGNACION . CONSTANTE ';' condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID ASIGNACION . CONSTANTE ';' condicion ';' CONSTANTE ';' '(' condicion ')'  (32)
	encabezado_for2 : ID ASIGNACION . CONSTANTE condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (33)
	encabezado_for2 : ID ASIGNACION . CONSTANTE ';' condicion up_down CONSTANTE ';' '(' condicion ')'  (34)
	encabezado_for2 : ID ASIGNACION . CONSTANTE ';' condicion ';' up_down '(' condicion ')'  (35)

	CONSTANTE  shift 107
	.  error


state 74
	sentencia_control : FOR '(' encabezado_for . ')' bloque_sentencias_ejecutables  (20)
	sentencia_control : FOR '(' encabezado_for . ')' error  (21)
	sentencia_control : FOR '(' encabezado_for . bloque_sentencias_ejecutables  (23)

	ID  shift 108
	IF  shift 5
	BEGIN  shift 109
	OUTF  shift 7
	FOR  shift 11
	')'  shift 110
	.  error

	sentencia_ejecutable  goto 111
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	bloque_sentencias_ejecutables  goto 112


state 75
	sentencia_control : FOR encabezado_for ')' . bloque_sentencias_ejecutables  (22)

	ID  shift 108
	IF  shift 5
	BEGIN  shift 109
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 111
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	bloque_sentencias_ejecutables  goto 113


state 76
	declaracion_funcion : tipo FUN ID . '(' parametro ')' BEGIN $$1 cuerpo_funcion $$2 END  (49)
	declaracion_funcion : tipo FUN ID . '(' bloque_list_parametro ')' BEGIN cuerpo_funcion END  (50)
	declaracion_funcion : tipo FUN ID . '(' ')' BEGIN cuerpo_funcion END  (53)

	'('  shift 114
	.  error


state 77
	declaracion_funcion : tipo FUN '(' . parametro ')' BEGIN cuerpo_funcion END  (51)
	declaracion_funcion : tipo FUN '(' . parametro ')' BEGIN END  (52)

	ID  shift 115
	ULONGINT  shift 9
	SINGLE  shift 10
	.  error

	tipo  goto 116
	tipo_base  goto 24
	parametro  goto 117


state 78
	list_variables : list_variables ',' . ID  (45)

	ID  shift 118
	.  error


state 79
	factor : ID '[' . CONSTANTE ']'  (78)

	CONSTANTE  shift 119
	.  error


state 80
	factor : '-' ID .  (79)
	factor : '-' ID . '[' CONSTANTE ']'  (81)

	'['  shift 120
	$end  reduce 79
	ID  reduce 79
	MAYORIGUAL  reduce 79
	MENORIGUAL  reduce 79
	DISTINTO  reduce 79
	IF  reduce 79
	END  reduce 79
	OUTF  reduce 79
	TYPEDEF  reduce 79
	RET  reduce 79
	ULONGINT  reduce 79
	SINGLE  reduce 79
	FOR  reduce 79
	UP  reduce 79
	DOWN  reduce 79
	';'  reduce 79
	')'  reduce 79
	','  reduce 79
	'+'  reduce 79
	'-'  reduce 79
	'*'  reduce 79
	'/'  reduce 79
	'<'  reduce 79
	'>'  reduce 79
	'='  reduce 79


state 81
	factor : '-' CONSTANTE .  (80)

	.  reduce 80


state 82
	expresion : expresion '+' . termino  (65)
	expresion : expresion '+' . error  (68)

	error  shift 121
	ID  shift 48
	CONSTANTE  shift 49
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	termino  goto 122
	factor  goto 54


state 83
	expresion : expresion '-' . termino  (66)
	expresion : expresion '-' . error  (69)

	error  shift 123
	ID  shift 48
	CONSTANTE  shift 49
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	termino  goto 124
	factor  goto 54


state 84
	termino : termino '*' . factor  (70)
	termino : termino '*' . error  (73)

	error  shift 125
	ID  shift 48
	CONSTANTE  shift 49
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	factor  goto 126


state 85
	termino : termino '/' . factor  (71)
	termino : termino '/' . error  (74)

	error  shift 127
	ID  shift 48
	CONSTANTE  shift 49
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	factor  goto 128


state 86
	invocacion_funcion : ID '(' expresion ')' .  (88)

	.  reduce 88


state 87
	invocacion_funcion : ID '(' tipo_base '(' . expresion ')' ')'  (91)

	ID  shift 48
	CONSTANTE  shift 49
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	expresion  goto 129
	termino  goto 53
	factor  goto 54


state 88
	invocacion_funcion : ID '(' bloque_list_expresiones ')' .  (89)

	.  reduce 89


state 89
	bloque_list_expresiones : list_expresiones ',' . expresion  (120)
	list_expresiones : list_expresiones ',' . expresion  (121)

	ID  shift 48
	CONSTANTE  shift 49
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	expresion  goto 130
	termino  goto 53
	factor  goto 54


state 90
	asignacion : ID '[' CONSTANTE ']' . ASIGNACION expresion  (39)

	ASIGNACION  shift 131
	.  error


state 91
	expresion : expresion . '+' termino  (65)
	expresion : expresion . '-' termino  (66)
	expresion : expresion . '+' error  (68)
	expresion : expresion . '-' error  (69)
	list_expresiones : expresion .  (122)

	'+'  shift 82
	'-'  shift 83
	','  reduce 122


state 92
	condicion : '(' bloque_list_expresiones . ')' comparacion '(' bloque_list_expresiones ')'  (118)

	')'  shift 132
	.  error


state 93
	bloque_if : IF '(' condicion ')' . THEN cuerpo_if_unico fin_if  (97)
	bloque_if : IF '(' condicion ')' . THEN cuerpo_if_bloque fin_if  (98)
	bloque_if : IF '(' condicion ')' . THEN cuerpo_if_unico ELSE cuerpo_if_unico fin_if  (99)
	bloque_if : IF '(' condicion ')' . THEN cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if  (100)
	bloque_if : IF '(' condicion ')' . THEN cuerpo_if_unico ELSE cuerpo_if_bloque fin_if  (101)
	bloque_if : IF '(' condicion ')' . THEN cuerpo_if_bloque ELSE cuerpo_if_unico fin_if  (102)

	THEN  shift 133
	.  error


state 94
	comparacion : MAYORIGUAL .  (111)

	.  reduce 111


state 95
	comparacion : MENORIGUAL .  (112)

	.  reduce 112


state 96
	comparacion : DISTINTO .  (113)

	.  reduce 113


state 97
	comparacion : '<' .  (116)

	.  reduce 116


state 98
	comparacion : '>' .  (115)

	.  reduce 115


state 99
	comparacion : '=' .  (114)

	.  reduce 114


state 100
	condicion : expresion comparacion . expresion  (117)

	ID  shift 48
	CONSTANTE  shift 49
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	expresion  goto 134
	termino  goto 53
	factor  goto 54


state 101
	salida_mensaje : OUTF '(' CADENA ')' .  (124)

	.  reduce 124


state 102
	salida_mensaje : OUTF '(' expresion ')' .  (125)

	.  reduce 125


state 103
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base . '>' ID  (82)
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base . '>' error  (83)
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base . ID  (85)

	ID  shift 135
	'>'  shift 136
	.  error


state 104
	declaracion_tipo : TYPEDEF TRIPLE tipo_base ID .  (86)

	.  reduce 86


state 105
	declaracion_tipo : TYPEDEF TRIPLE tipo_base '>' . ID  (84)

	ID  shift 137
	.  error


state 106
	declaracion_tipo : TYPEDEF '<' tipo_base '>' . ID  (87)

	ID  shift 138
	.  error


state 107
	encabezado_for1 : ID ASIGNACION CONSTANTE . ';' condicion ';' up_down CONSTANTE  (26)
	encabezado_for1 : ID ASIGNACION CONSTANTE . ';' condicion ';' CONSTANTE  (27)
	encabezado_for1 : ID ASIGNACION CONSTANTE . condicion ';' up_down CONSTANTE  (28)
	encabezado_for1 : ID ASIGNACION CONSTANTE . ';' condicion up_down CONSTANTE  (29)
	encabezado_for1 : ID ASIGNACION CONSTANTE . ';' condicion ';' up_down  (30)
	encabezado_for2 : ID ASIGNACION CONSTANTE . ';' condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID ASIGNACION CONSTANTE . ';' condicion ';' CONSTANTE ';' '(' condicion ')'  (32)
	encabezado_for2 : ID ASIGNACION CONSTANTE . condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (33)
	encabezado_for2 : ID ASIGNACION CONSTANTE . ';' condicion up_down CONSTANTE ';' '(' condicion ')'  (34)
	encabezado_for2 : ID ASIGNACION CONSTANTE . ';' condicion ';' up_down '(' condicion ')'  (35)

	error  shift 62
	ID  shift 48
	CONSTANTE  shift 49
	';'  shift 139
	'('  shift 63
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	condicion  goto 140
	expresion  goto 65
	termino  goto 53
	factor  goto 54


state 108
	asignacion : ID . ASIGNACION expresion  (38)
	asignacion : ID . '[' CONSTANTE ']' ASIGNACION expresion  (39)
	asignacion : ID . ASIGNACION error  (40)
	invocacion_funcion : ID . '(' expresion ')'  (88)
	invocacion_funcion : ID . '(' bloque_list_expresiones ')'  (89)
	invocacion_funcion : ID . '(' ')'  (90)
	invocacion_funcion : ID . '(' tipo_base '(' expresion ')' ')'  (91)

	ASIGNACION  shift 26
	'('  shift 27
	'['  shift 28
	.  error


state 109
	bloque_sentencias_ejecutables : BEGIN . list_sentencias_ejecutables END  (95)
	bloque_sentencias_ejecutables : BEGIN . error  (96)

	error  shift 141
	ID  shift 108
	IF  shift 5
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 142
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	list_sentencias_ejecutables  goto 143


state 110
	sentencia_control : FOR '(' encabezado_for ')' . bloque_sentencias_ejecutables  (20)
	sentencia_control : FOR '(' encabezado_for ')' . error  (21)

	error  shift 144
	ID  shift 108
	IF  shift 5
	BEGIN  shift 109
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 111
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	bloque_sentencias_ejecutables  goto 145


state 111
	bloque_sentencias_ejecutables : sentencia_ejecutable . ';'  (94)

	';'  shift 146
	.  error


state 112
	sentencia_control : FOR '(' encabezado_for bloque_sentencias_ejecutables .  (23)

	.  reduce 23


state 113
	sentencia_control : FOR encabezado_for ')' bloque_sentencias_ejecutables .  (22)

	.  reduce 22


state 114
	declaracion_funcion : tipo FUN ID '(' . parametro ')' BEGIN $$1 cuerpo_funcion $$2 END  (49)
	declaracion_funcion : tipo FUN ID '(' . bloque_list_parametro ')' BEGIN cuerpo_funcion END  (50)
	declaracion_funcion : tipo FUN ID '(' . ')' BEGIN cuerpo_funcion END  (53)

	ID  shift 115
	ULONGINT  shift 9
	SINGLE  shift 10
	')'  shift 147
	.  error

	tipo  goto 116
	tipo_base  goto 24
	parametro  goto 148
	bloque_list_parametro  goto 149
	list_parametro  goto 150


state 115
	tipo : ID .  (42)
	parametro : ID .  (55)

	ID  reduce 42
	')'  reduce 55
	','  reduce 55


state 116
	parametro : tipo . ID  (54)

	ID  shift 151
	.  error


state 117
	declaracion_funcion : tipo FUN '(' parametro . ')' BEGIN cuerpo_funcion END  (51)
	declaracion_funcion : tipo FUN '(' parametro . ')' BEGIN END  (52)

	')'  shift 152
	.  error


state 118
	list_variables : list_variables ',' ID .  (45)

	.  reduce 45


state 119
	factor : ID '[' CONSTANTE . ']'  (78)

	']'  shift 153
	.  error


state 120
	factor : '-' ID '[' . CONSTANTE ']'  (81)

	CONSTANTE  shift 154
	.  error


state 121
	expresion : expresion '+' error .  (68)

	.  reduce 68


state 122
	expresion : expresion '+' termino .  (65)
	termino : termino . '*' factor  (70)
	termino : termino . '/' factor  (71)
	termino : termino . '*' error  (73)
	termino : termino . '/' error  (74)

	'*'  shift 84
	'/'  shift 85
	$end  reduce 65
	ID  reduce 65
	MAYORIGUAL  reduce 65
	MENORIGUAL  reduce 65
	DISTINTO  reduce 65
	IF  reduce 65
	END  reduce 65
	OUTF  reduce 65
	TYPEDEF  reduce 65
	RET  reduce 65
	ULONGINT  reduce 65
	SINGLE  reduce 65
	FOR  reduce 65
	UP  reduce 65
	DOWN  reduce 65
	';'  reduce 65
	')'  reduce 65
	','  reduce 65
	'+'  reduce 65
	'-'  reduce 65
	'<'  reduce 65
	'>'  reduce 65
	'='  reduce 65


state 123
	expresion : expresion '-' error .  (69)

	.  reduce 69


state 124
	expresion : expresion '-' termino .  (66)
	termino : termino . '*' factor  (70)
	termino : termino . '/' factor  (71)
	termino : termino . '*' error  (73)
	termino : termino . '/' error  (74)

	'*'  shift 84
	'/'  shift 85
	$end  reduce 66
	ID  reduce 66
	MAYORIGUAL  reduce 66
	MENORIGUAL  reduce 66
	DISTINTO  reduce 66
	IF  reduce 66
	END  reduce 66
	OUTF  reduce 66
	TYPEDEF  reduce 66
	RET  reduce 66
	ULONGINT  reduce 66
	SINGLE  reduce 66
	FOR  reduce 66
	UP  reduce 66
	DOWN  reduce 66
	';'  reduce 66
	')'  reduce 66
	','  reduce 66
	'+'  reduce 66
	'-'  reduce 66
	'<'  reduce 66
	'>'  reduce 66
	'='  reduce 66


state 125
	termino : termino '*' error .  (73)

	.  reduce 73


state 126
	termino : termino '*' factor .  (70)

	.  reduce 70


state 127
	termino : termino '/' error .  (74)

	.  reduce 74


state 128
	termino : termino '/' factor .  (71)

	.  reduce 71


state 129
	expresion : expresion . '+' termino  (65)
	expresion : expresion . '-' termino  (66)
	expresion : expresion . '+' error  (68)
	expresion : expresion . '-' error  (69)
	invocacion_funcion : ID '(' tipo_base '(' expresion . ')' ')'  (91)

	')'  shift 155
	'+'  shift 82
	'-'  shift 83
	.  error


state 130
	expresion : expresion . '+' termino  (65)
	expresion : expresion . '-' termino  (66)
	expresion : expresion . '+' error  (68)
	expresion : expresion . '-' error  (69)
	bloque_list_expresiones : list_expresiones ',' expresion .  (120)
	list_expresiones : list_expresiones ',' expresion .  (121)

	'+'  shift 82
	'-'  shift 83
	')'  reduce 120
	','  reduce 121


state 131
	asignacion : ID '[' CONSTANTE ']' ASIGNACION . expresion  (39)

	ID  shift 48
	CONSTANTE  shift 49
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	expresion  goto 156
	termino  goto 53
	factor  goto 54


state 132
	condicion : '(' bloque_list_expresiones ')' . comparacion '(' bloque_list_expresiones ')'  (118)

	MAYORIGUAL  shift 94
	MENORIGUAL  shift 95
	DISTINTO  shift 96
	'<'  shift 97
	'>'  shift 98
	'='  shift 99
	.  error

	comparacion  goto 157


state 133
	bloque_if : IF '(' condicion ')' THEN . cuerpo_if_unico fin_if  (97)
	bloque_if : IF '(' condicion ')' THEN . cuerpo_if_bloque fin_if  (98)
	bloque_if : IF '(' condicion ')' THEN . cuerpo_if_unico ELSE cuerpo_if_unico fin_if  (99)
	bloque_if : IF '(' condicion ')' THEN . cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if  (100)
	bloque_if : IF '(' condicion ')' THEN . cuerpo_if_unico ELSE cuerpo_if_bloque fin_if  (101)
	bloque_if : IF '(' condicion ')' THEN . cuerpo_if_bloque ELSE cuerpo_if_unico fin_if  (102)

	error  shift 158
	ID  shift 108
	IF  shift 5
	BEGIN  shift 159
	OUTF  shift 7
	RET  shift 160
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 161
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	sentencia_return  goto 162
	list_sentencias_ejecutables  goto 163
	cuerpo_if_unico  goto 164
	cuerpo_if_bloque  goto 165


state 134
	expresion : expresion . '+' termino  (65)
	expresion : expresion . '-' termino  (66)
	expresion : expresion . '+' error  (68)
	expresion : expresion . '-' error  (69)
	condicion : expresion comparacion expresion .  (117)

	'+'  shift 82
	'-'  shift 83
	UP  reduce 117
	DOWN  reduce 117
	';'  reduce 117
	')'  reduce 117


state 135
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base ID .  (85)

	.  reduce 85


state 136
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base '>' . ID  (82)
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base '>' . error  (83)

	error  shift 166
	ID  shift 167
	.  error


state 137
	declaracion_tipo : TYPEDEF TRIPLE tipo_base '>' ID .  (84)

	.  reduce 84


state 138
	declaracion_tipo : TYPEDEF '<' tipo_base '>' ID .  (87)

	.  reduce 87


state 139
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' . condicion ';' up_down CONSTANTE  (26)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' . condicion ';' CONSTANTE  (27)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' . condicion up_down CONSTANTE  (29)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' . condicion ';' up_down  (30)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' . condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' . condicion ';' CONSTANTE ';' '(' condicion ')'  (32)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' . condicion up_down CONSTANTE ';' '(' condicion ')'  (34)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' . condicion ';' up_down '(' condicion ')'  (35)

	error  shift 62
	ID  shift 48
	CONSTANTE  shift 49
	'('  shift 63
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	condicion  goto 168
	expresion  goto 65
	termino  goto 53
	factor  goto 54


state 140
	encabezado_for1 : ID ASIGNACION CONSTANTE condicion . ';' up_down CONSTANTE  (28)
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion . ';' up_down CONSTANTE ';' '(' condicion ')'  (33)

	';'  shift 169
	.  error


state 141
	bloque_sentencias_ejecutables : BEGIN error .  (96)

	.  reduce 96


state 142
	list_sentencias_ejecutables : sentencia_ejecutable . ';'  (110)

	';'  shift 170
	.  error


state 143
	bloque_sentencias_ejecutables : BEGIN list_sentencias_ejecutables . END  (95)
	list_sentencias_ejecutables : list_sentencias_ejecutables . sentencia_ejecutable ';'  (109)

	ID  shift 108
	IF  shift 5
	END  shift 171
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 172
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23


state 144
	sentencia_control : FOR '(' encabezado_for ')' error .  (21)

	.  reduce 21


state 145
	sentencia_control : FOR '(' encabezado_for ')' bloque_sentencias_ejecutables .  (20)

	.  reduce 20


state 146
	bloque_sentencias_ejecutables : sentencia_ejecutable ';' .  (94)

	.  reduce 94


state 147
	declaracion_funcion : tipo FUN ID '(' ')' . BEGIN cuerpo_funcion END  (53)

	BEGIN  shift 173
	.  error


state 148
	declaracion_funcion : tipo FUN ID '(' parametro . ')' BEGIN $$1 cuerpo_funcion $$2 END  (49)
	list_parametro : parametro .  (57)

	')'  shift 174
	','  reduce 57


state 149
	declaracion_funcion : tipo FUN ID '(' bloque_list_parametro . ')' BEGIN cuerpo_funcion END  (50)

	')'  shift 175
	.  error


state 150
	bloque_list_parametro : list_parametro . ',' parametro  (56)
	list_parametro : list_parametro . ',' parametro  (58)

	','  shift 176
	.  error


state 151
	parametro : tipo ID .  (54)

	.  reduce 54


state 152
	declaracion_funcion : tipo FUN '(' parametro ')' . BEGIN cuerpo_funcion END  (51)
	declaracion_funcion : tipo FUN '(' parametro ')' . BEGIN END  (52)

	BEGIN  shift 177
	.  error


state 153
	factor : ID '[' CONSTANTE ']' .  (78)

	.  reduce 78


state 154
	factor : '-' ID '[' CONSTANTE . ']'  (81)

	']'  shift 178
	.  error


state 155
	invocacion_funcion : ID '(' tipo_base '(' expresion ')' . ')'  (91)

	')'  shift 179
	.  error


state 156
	asignacion : ID '[' CONSTANTE ']' ASIGNACION expresion .  (39)
	expresion : expresion . '+' termino  (65)
	expresion : expresion . '-' termino  (66)
	expresion : expresion . '+' error  (68)
	expresion : expresion . '-' error  (69)

	'+'  shift 82
	'-'  shift 83
	$end  reduce 39
	ID  reduce 39
	IF  reduce 39
	END  reduce 39
	OUTF  reduce 39
	TYPEDEF  reduce 39
	RET  reduce 39
	ULONGINT  reduce 39
	SINGLE  reduce 39
	FOR  reduce 39
	';'  reduce 39


state 157
	condicion : '(' bloque_list_expresiones ')' comparacion . '(' bloque_list_expresiones ')'  (118)

	'('  shift 180
	.  error


state 158
	cuerpo_if_bloque : error .  (108)

	.  reduce 108


state 159
	cuerpo_if_bloque : BEGIN . list_sentencias_ejecutables END  (105)
	cuerpo_if_bloque : BEGIN . error  (106)

	error  shift 181
	ID  shift 108
	IF  shift 5
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 142
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	list_sentencias_ejecutables  goto 182


state 160
	sentencia_return : RET . '(' expresion ')'  (64)

	'('  shift 183
	.  error


state 161
	cuerpo_if_unico : sentencia_ejecutable . ';'  (103)
	list_sentencias_ejecutables : sentencia_ejecutable . ';'  (110)

	';'  shift 184
	.  error


state 162
	cuerpo_if_unico : sentencia_return . ';'  (104)

	';'  shift 185
	.  error


state 163
	cuerpo_if_bloque : list_sentencias_ejecutables . END  (107)
	list_sentencias_ejecutables : list_sentencias_ejecutables . sentencia_ejecutable ';'  (109)

	ID  shift 108
	IF  shift 5
	END  shift 186
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 172
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23


state 164
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico . fin_if  (97)
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico . ELSE cuerpo_if_unico fin_if  (99)
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico . ELSE cuerpo_if_bloque fin_if  (101)

	error  shift 187
	ELSE  shift 188
	END_IF  shift 189
	.  error

	fin_if  goto 190


state 165
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque . fin_if  (98)
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque . ELSE cuerpo_if_bloque fin_if  (100)
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque . ELSE cuerpo_if_unico fin_if  (102)

	error  shift 187
	ELSE  shift 191
	END_IF  shift 189
	.  error

	fin_if  goto 192


state 166
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base '>' error .  (83)

	.  reduce 83


state 167
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base '>' ID .  (82)

	.  reduce 82


state 168
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion . ';' up_down CONSTANTE  (26)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion . ';' CONSTANTE  (27)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion . up_down CONSTANTE  (29)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion . ';' up_down  (30)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion . ';' up_down CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion . ';' CONSTANTE ';' '(' condicion ')'  (32)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion . up_down CONSTANTE ';' '(' condicion ')'  (34)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion . ';' up_down '(' condicion ')'  (35)

	UP  shift 193
	DOWN  shift 194
	';'  shift 195
	.  error

	up_down  goto 196


state 169
	encabezado_for1 : ID ASIGNACION CONSTANTE condicion ';' . up_down CONSTANTE  (28)
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' . up_down CONSTANTE ';' '(' condicion ')'  (33)

	UP  shift 193
	DOWN  shift 194
	.  error

	up_down  goto 197


state 170
	list_sentencias_ejecutables : sentencia_ejecutable ';' .  (110)

	.  reduce 110


state 171
	bloque_sentencias_ejecutables : BEGIN list_sentencias_ejecutables END .  (95)

	.  reduce 95


state 172
	list_sentencias_ejecutables : list_sentencias_ejecutables sentencia_ejecutable . ';'  (109)

	';'  shift 198
	.  error


state 173
	declaracion_funcion : tipo FUN ID '(' ')' BEGIN . cuerpo_funcion END  (53)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	RET  shift 160
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	sentencia  goto 199
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24
	cuerpo_funcion  goto 200
	list_sentencias_funcion  goto 201
	sentencia_return  goto 202


state 174
	declaracion_funcion : tipo FUN ID '(' parametro ')' . BEGIN $$1 cuerpo_funcion $$2 END  (49)

	BEGIN  shift 203
	.  error


state 175
	declaracion_funcion : tipo FUN ID '(' bloque_list_parametro ')' . BEGIN cuerpo_funcion END  (50)

	BEGIN  shift 204
	.  error


state 176
	bloque_list_parametro : list_parametro ',' . parametro  (56)
	list_parametro : list_parametro ',' . parametro  (58)

	ID  shift 115
	ULONGINT  shift 9
	SINGLE  shift 10
	.  error

	tipo  goto 116
	tipo_base  goto 24
	parametro  goto 205


state 177
	declaracion_funcion : tipo FUN '(' parametro ')' BEGIN . cuerpo_funcion END  (51)
	declaracion_funcion : tipo FUN '(' parametro ')' BEGIN . END  (52)

	ID  shift 4
	IF  shift 5
	END  shift 206
	OUTF  shift 7
	TYPEDEF  shift 8
	RET  shift 160
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	sentencia  goto 199
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24
	cuerpo_funcion  goto 207
	list_sentencias_funcion  goto 201
	sentencia_return  goto 202


state 178
	factor : '-' ID '[' CONSTANTE ']' .  (81)

	.  reduce 81


state 179
	invocacion_funcion : ID '(' tipo_base '(' expresion ')' ')' .  (91)

	.  reduce 91


state 180
	condicion : '(' bloque_list_expresiones ')' comparacion '(' . bloque_list_expresiones ')'  (118)

	error  shift 55
	ID  shift 48
	CONSTANTE  shift 49
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	expresion  goto 91
	termino  goto 53
	factor  goto 54
	bloque_list_expresiones  goto 208
	list_expresiones  goto 60


state 181
	cuerpo_if_bloque : BEGIN error .  (106)

	.  reduce 106


state 182
	cuerpo_if_bloque : BEGIN list_sentencias_ejecutables . END  (105)
	list_sentencias_ejecutables : list_sentencias_ejecutables . sentencia_ejecutable ';'  (109)

	ID  shift 108
	IF  shift 5
	END  shift 209
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 172
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23


state 183
	sentencia_return : RET '(' . expresion ')'  (64)

	ID  shift 48
	CONSTANTE  shift 49
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	expresion  goto 210
	termino  goto 53
	factor  goto 54


state 184
	cuerpo_if_unico : sentencia_ejecutable ';' .  (103)
	list_sentencias_ejecutables : sentencia_ejecutable ';' .  (110)

	error  reduce 103
	ID  reduce 110
	IF  reduce 110
	ELSE  reduce 103
	END  reduce 110
	END_IF  reduce 103
	OUTF  reduce 110
	FOR  reduce 110


state 185
	cuerpo_if_unico : sentencia_return ';' .  (104)

	.  reduce 104


state 186
	cuerpo_if_bloque : list_sentencias_ejecutables END .  (107)

	.  reduce 107


state 187
	fin_if : error .  (93)

	.  reduce 93


state 188
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico ELSE . cuerpo_if_unico fin_if  (99)
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico ELSE . cuerpo_if_bloque fin_if  (101)

	error  shift 158
	ID  shift 108
	IF  shift 5
	BEGIN  shift 159
	OUTF  shift 7
	RET  shift 160
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 161
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	sentencia_return  goto 162
	list_sentencias_ejecutables  goto 163
	cuerpo_if_unico  goto 211
	cuerpo_if_bloque  goto 212


state 189
	fin_if : END_IF .  (92)

	.  reduce 92


state 190
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico fin_if .  (97)

	.  reduce 97


state 191
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque ELSE . cuerpo_if_bloque fin_if  (100)
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque ELSE . cuerpo_if_unico fin_if  (102)

	error  shift 158
	ID  shift 108
	IF  shift 5
	BEGIN  shift 159
	OUTF  shift 7
	RET  shift 160
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 161
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	sentencia_return  goto 162
	list_sentencias_ejecutables  goto 163
	cuerpo_if_unico  goto 213
	cuerpo_if_bloque  goto 214


state 192
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque fin_if .  (98)

	.  reduce 98


state 193
	up_down : UP .  (36)

	.  reduce 36


state 194
	up_down : DOWN .  (37)

	.  reduce 37


state 195
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' . up_down CONSTANTE  (26)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' . CONSTANTE  (27)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' . up_down  (30)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' . up_down CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' . CONSTANTE ';' '(' condicion ')'  (32)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' . up_down '(' condicion ')'  (35)

	CONSTANTE  shift 215
	UP  shift 193
	DOWN  shift 194
	.  error

	up_down  goto 216


state 196
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion up_down . CONSTANTE  (29)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion up_down . CONSTANTE ';' '(' condicion ')'  (34)

	CONSTANTE  shift 217
	.  error


state 197
	encabezado_for1 : ID ASIGNACION CONSTANTE condicion ';' up_down . CONSTANTE  (28)
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' up_down . CONSTANTE ';' '(' condicion ')'  (33)

	CONSTANTE  shift 218
	.  error


state 198
	list_sentencias_ejecutables : list_sentencias_ejecutables sentencia_ejecutable ';' .  (109)

	.  reduce 109


state 199
	list_sentencias_funcion : sentencia .  (63)

	.  reduce 63


state 200
	declaracion_funcion : tipo FUN ID '(' ')' BEGIN cuerpo_funcion . END  (53)

	END  shift 219
	.  error


state 201
	cuerpo_funcion : list_sentencias_funcion . sentencia_return ';'  (59)
	cuerpo_funcion : list_sentencias_funcion .  (60)
	list_sentencias_funcion : list_sentencias_funcion . sentencia  (62)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	RET  shift 160
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	END  reduce 60

	sentencia  goto 220
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24
	sentencia_return  goto 221


state 202
	cuerpo_funcion : sentencia_return . ';'  (61)

	';'  shift 222
	.  error


state 203
	declaracion_funcion : tipo FUN ID '(' parametro ')' BEGIN . $$1 cuerpo_funcion $$2 END  (49)
	$$1 : .  (47)

	.  reduce 47

	$$1  goto 223


state 204
	declaracion_funcion : tipo FUN ID '(' bloque_list_parametro ')' BEGIN . cuerpo_funcion END  (50)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	RET  shift 160
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	sentencia  goto 199
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24
	cuerpo_funcion  goto 224
	list_sentencias_funcion  goto 201
	sentencia_return  goto 202


state 205
	bloque_list_parametro : list_parametro ',' parametro .  (56)
	list_parametro : list_parametro ',' parametro .  (58)

	')'  reduce 56
	','  reduce 58


state 206
	declaracion_funcion : tipo FUN '(' parametro ')' BEGIN END .  (52)

	.  reduce 52


state 207
	declaracion_funcion : tipo FUN '(' parametro ')' BEGIN cuerpo_funcion . END  (51)

	END  shift 225
	.  error


state 208
	condicion : '(' bloque_list_expresiones ')' comparacion '(' bloque_list_expresiones . ')'  (118)

	')'  shift 226
	.  error


state 209
	cuerpo_if_bloque : BEGIN list_sentencias_ejecutables END .  (105)

	.  reduce 105


state 210
	sentencia_return : RET '(' expresion . ')'  (64)
	expresion : expresion . '+' termino  (65)
	expresion : expresion . '-' termino  (66)
	expresion : expresion . '+' error  (68)
	expresion : expresion . '-' error  (69)

	')'  shift 227
	'+'  shift 82
	'-'  shift 83
	.  error


state 211
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_unico . fin_if  (99)

	error  shift 187
	END_IF  shift 189
	.  error

	fin_if  goto 228


state 212
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_bloque . fin_if  (101)

	error  shift 187
	END_IF  shift 189
	.  error

	fin_if  goto 229


state 213
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_unico . fin_if  (102)

	error  shift 187
	END_IF  shift 189
	.  error

	fin_if  goto 230


state 214
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_bloque . fin_if  (100)

	error  shift 187
	END_IF  shift 189
	.  error

	fin_if  goto 231


state 215
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE .  (27)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE . ';' '(' condicion ')'  (32)

	';'  shift 232
	ID  reduce 27
	IF  reduce 27
	BEGIN  reduce 27
	OUTF  reduce 27
	FOR  reduce 27
	')'  reduce 27


state 216
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down . CONSTANTE  (26)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down .  (30)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down . CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down . '(' condicion ')'  (35)

	CONSTANTE  shift 233
	'('  shift 234
	ID  reduce 30
	IF  reduce 30
	BEGIN  reduce 30
	OUTF  reduce 30
	FOR  reduce 30
	')'  reduce 30


state 217
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE .  (29)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE . ';' '(' condicion ')'  (34)

	';'  shift 235
	ID  reduce 29
	IF  reduce 29
	BEGIN  reduce 29
	OUTF  reduce 29
	FOR  reduce 29
	')'  reduce 29


state 218
	encabezado_for1 : ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE .  (28)
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE . ';' '(' condicion ')'  (33)

	';'  shift 236
	ID  reduce 28
	IF  reduce 28
	BEGIN  reduce 28
	OUTF  reduce 28
	FOR  reduce 28
	')'  reduce 28


state 219
	declaracion_funcion : tipo FUN ID '(' ')' BEGIN cuerpo_funcion END .  (53)

	.  reduce 53


state 220
	list_sentencias_funcion : list_sentencias_funcion sentencia .  (62)

	.  reduce 62


state 221
	cuerpo_funcion : list_sentencias_funcion sentencia_return . ';'  (59)

	';'  shift 237
	.  error


state 222
	cuerpo_funcion : sentencia_return ';' .  (61)

	.  reduce 61


state 223
	declaracion_funcion : tipo FUN ID '(' parametro ')' BEGIN $$1 . cuerpo_funcion $$2 END  (49)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	RET  shift 160
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	sentencia  goto 199
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24
	cuerpo_funcion  goto 238
	list_sentencias_funcion  goto 201
	sentencia_return  goto 202


state 224
	declaracion_funcion : tipo FUN ID '(' bloque_list_parametro ')' BEGIN cuerpo_funcion . END  (50)

	END  shift 239
	.  error


state 225
	declaracion_funcion : tipo FUN '(' parametro ')' BEGIN cuerpo_funcion END .  (51)

	.  reduce 51


state 226
	condicion : '(' bloque_list_expresiones ')' comparacion '(' bloque_list_expresiones ')' .  (118)

	.  reduce 118


state 227
	sentencia_return : RET '(' expresion ')' .  (64)

	.  reduce 64


state 228
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_unico fin_if .  (99)

	.  reduce 99


state 229
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_bloque fin_if .  (101)

	.  reduce 101


state 230
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_unico fin_if .  (102)

	.  reduce 102


state 231
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if .  (100)

	.  reduce 100


state 232
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE ';' . '(' condicion ')'  (32)

	'('  shift 240
	.  error


state 233
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE .  (26)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE . ';' '(' condicion ')'  (31)

	';'  shift 241
	ID  reduce 26
	IF  reduce 26
	BEGIN  reduce 26
	OUTF  reduce 26
	FOR  reduce 26
	')'  reduce 26


state 234
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down '(' . condicion ')'  (35)

	error  shift 62
	ID  shift 48
	CONSTANTE  shift 49
	'('  shift 63
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	condicion  goto 242
	expresion  goto 65
	termino  goto 53
	factor  goto 54


state 235
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE ';' . '(' condicion ')'  (34)

	'('  shift 243
	.  error


state 236
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE ';' . '(' condicion ')'  (33)

	'('  shift 244
	.  error


state 237
	cuerpo_funcion : list_sentencias_funcion sentencia_return ';' .  (59)

	.  reduce 59


state 238
	declaracion_funcion : tipo FUN ID '(' parametro ')' BEGIN $$1 cuerpo_funcion . $$2 END  (49)
	$$2 : .  (48)

	.  reduce 48

	$$2  goto 245


state 239
	declaracion_funcion : tipo FUN ID '(' bloque_list_parametro ')' BEGIN cuerpo_funcion END .  (50)

	.  reduce 50


state 240
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE ';' '(' . condicion ')'  (32)

	error  shift 62
	ID  shift 48
	CONSTANTE  shift 49
	'('  shift 63
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	condicion  goto 246
	expresion  goto 65
	termino  goto 53
	factor  goto 54


state 241
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE ';' . '(' condicion ')'  (31)

	'('  shift 247
	.  error


state 242
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down '(' condicion . ')'  (35)

	')'  shift 248
	.  error


state 243
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE ';' '(' . condicion ')'  (34)

	error  shift 62
	ID  shift 48
	CONSTANTE  shift 49
	'('  shift 63
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	condicion  goto 249
	expresion  goto 65
	termino  goto 53
	factor  goto 54


state 244
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE ';' '(' . condicion ')'  (33)

	error  shift 62
	ID  shift 48
	CONSTANTE  shift 49
	'('  shift 63
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	condicion  goto 250
	expresion  goto 65
	termino  goto 53
	factor  goto 54


state 245
	declaracion_funcion : tipo FUN ID '(' parametro ')' BEGIN $$1 cuerpo_funcion $$2 . END  (49)

	END  shift 251
	.  error


state 246
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE ';' '(' condicion . ')'  (32)

	')'  shift 252
	.  error


state 247
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE ';' '(' . condicion ')'  (31)

	error  shift 62
	ID  shift 48
	CONSTANTE  shift 49
	'('  shift 63
	'-'  shift 50
	.  error

	invocacion_funcion  goto 51
	condicion  goto 253
	expresion  goto 65
	termino  goto 53
	factor  goto 54


state 248
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down '(' condicion ')' .  (35)

	.  reduce 35


state 249
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE ';' '(' condicion . ')'  (34)

	')'  shift 254
	.  error


state 250
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE ';' '(' condicion . ')'  (33)

	')'  shift 255
	.  error


state 251
	declaracion_funcion : tipo FUN ID '(' parametro ')' BEGIN $$1 cuerpo_funcion $$2 END .  (49)

	.  reduce 49


state 252
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE ';' '(' condicion ')' .  (32)

	.  reduce 32


state 253
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE ';' '(' condicion . ')'  (31)

	')'  shift 256
	.  error


state 254
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE ';' '(' condicion ')' .  (34)

	.  reduce 34


state 255
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE ';' '(' condicion ')' .  (33)

	.  reduce 33


state 256
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE ';' '(' condicion ')' .  (31)

	.  reduce 31


39 terminals, 40 nonterminals
127 grammar rules, 257 states
