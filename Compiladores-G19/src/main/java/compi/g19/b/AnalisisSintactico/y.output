   0  $accept : programa $end

   1  programa : ID BEGIN list_sentencias END
   2           | BEGIN list_sentencias END
   3           | ID BEGIN list_sentencias
   4           | ID list_sentencias END
   5           | ID list_sentencias

   6  list_sentencias : list_sentencias sentencia
   7                  | sentencia

   8  sentencia : sentencia_declarativa ';'
   9            | sentencia_ejecutable ';'
  10            | sentencia_ejecutable
  11            | sentencia_declarativa

  12  sentencia_declarativa : tipo list_variables
  13                        | declaracion_funcion
  14                        | declaracion_tipo

  15  sentencia_ejecutable : asignacion
  16                       | invocacion_funcion
  17                       | bloque_if
  18                       | salida_mensaje
  19                       | sentencia_control

  20  sentencia_control : FOR '(' encabezado_for ')' bloque_sentencias_ejecutables
  21                    | FOR '(' encabezado_for ')' error
  22                    | FOR encabezado_for ')' bloque_sentencias_ejecutables
  23                    | FOR '(' encabezado_for bloque_sentencias_ejecutables

  24  encabezado_for : encabezado_for1
  25                 | encabezado_for2

  26  encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE
  27                  | ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE
  28                  | ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE
  29                  | ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE

  30  encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE ';' '(' condicion ')'
  31                  | ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE ';' '(' condicion ')'
  32                  | ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE ';' '(' condicion ')'
  33                  | ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE ';' '(' condicion ')'
  34                  | ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE '(' condicion ')'

  35  up_down : UP
  36          | DOWN

  37  asignacion : ID ASIGNACION expresion
  38             | ID '[' CONSTANTE ']' ASIGNACION expresion
  39             | ID ASIGNACION error

  40  tipo : tipo_base
  41       | ID

  42  tipo_base : ULONGINT
  43            | SINGLE

  44  list_variables : list_variables ',' ID
  45                 | ID

  46  $$1 :

  47  $$2 :

  48  declaracion_funcion : tipo FUN ID '(' parametro ')' BEGIN $$1 cuerpo_funcion $$2 END
  49                      | tipo FUN ID '(' bloque_list_parametro ')' BEGIN cuerpo_funcion END
  50                      | tipo FUN '(' parametro ')' BEGIN cuerpo_funcion END
  51                      | tipo FUN ID '(' ')' BEGIN cuerpo_funcion END

  52  parametro : tipo ID
  53            | ID

  54  bloque_list_parametro : list_parametro ',' parametro

  55  list_parametro : parametro
  56                 | list_parametro ',' parametro

  57  cuerpo_funcion : list_sentencias_funcion sentencia_return ';'
  58                 | list_sentencias_funcion
  59                 | sentencia_return ';'

  60  list_sentencias_funcion : list_sentencias_funcion sentencia
  61                          | sentencia

  62  sentencia_return : RET '(' expresion ')'

  63  expresion : expresion '+' termino
  64            | expresion '-' termino
  65            | termino
  66            | expresion '+' error
  67            | expresion '-' error

  68  termino : termino '*' factor
  69          | termino '/' factor
  70          | factor
  71          | termino '*' error
  72          | termino '/' error

  73  factor : ID
  74         | CONSTANTE
  75         | invocacion_funcion
  76         | ID '[' CONSTANTE ']'
  77         | '-' ID
  78         | '-' CONSTANTE
  79         | '-' ID '[' CONSTANTE ']'

  80  declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base '>' ID
  81                   | TYPEDEF TRIPLE '<' tipo_base '>' error
  82                   | TYPEDEF TRIPLE tipo_base '>' ID
  83                   | TYPEDEF TRIPLE '<' tipo_base ID

  84  invocacion_funcion : ID '(' expresion ')'
  85                     | ID '(' bloque_list_expresiones ')'
  86                     | ID '(' ')'
  87                     | ID '(' tipo_base '(' expresion ')' ')'

  88  fin_if : END_IF
  89         | error

  90  bloque_sentencias_ejecutables : sentencia_ejecutable ';'
  91                                | sentencia_ejecutable error
  92                                | BEGIN list_sentencias_ejecutables END

  93  bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico fin_if
  94            | IF '(' condicion ')' THEN cuerpo_if_bloque fin_if
  95            | IF '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_unico fin_if
  96            | IF '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if
  97            | IF '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_bloque fin_if
  98            | IF '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_unico fin_if

  99  cuerpo_if_unico : sentencia_ejecutable ';'
 100                  | sentencia_return ';'

 101  cuerpo_if_bloque : BEGIN list_sentencias_ejecutables END
 102                   | BEGIN error
 103                   | list_sentencias_ejecutables END
 104                   | error

 105  list_sentencias_ejecutables : list_sentencias_ejecutables sentencia_ejecutable ';'
 106                              | sentencia_ejecutable ';'

 107  comparacion : MAYORIGUAL
 108              | MENORIGUAL
 109              | DISTINTO
 110              | '='
 111              | '>'
 112              | '<'

 113  condicion : expresion comparacion expresion
 114            | '(' bloque_list_expresiones ')' comparacion '(' bloque_list_expresiones ')'
 115            | error

 116  bloque_list_expresiones : list_expresiones ',' expresion

 117  list_expresiones : list_expresiones ',' expresion
 118                   | expresion
 119                   | error

 120  salida_mensaje : OUTF '(' CADENA ')'
 121                 | OUTF '(' expresion ')'
 122                 | OUTF '(' ')'

state 0
	$accept : . programa $end  (0)

	ID  shift 1
	BEGIN  shift 2
	.  error

	programa  goto 3


state 1
	programa : ID . BEGIN list_sentencias END  (1)
	programa : ID . BEGIN list_sentencias  (3)
	programa : ID . list_sentencias END  (4)
	programa : ID . list_sentencias  (5)

	ID  shift 4
	IF  shift 5
	BEGIN  shift 6
	OUTF  shift 7
	TYPEDEF  shift 8
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	list_sentencias  goto 12
	sentencia  goto 13
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24


state 2
	programa : BEGIN . list_sentencias END  (2)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	list_sentencias  goto 25
	sentencia  goto 13
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24


state 3
	$accept : programa . $end  (0)

	$end  accept


state 4
	asignacion : ID . ASIGNACION expresion  (37)
	asignacion : ID . '[' CONSTANTE ']' ASIGNACION expresion  (38)
	asignacion : ID . ASIGNACION error  (39)
	tipo : ID .  (41)
	invocacion_funcion : ID . '(' expresion ')'  (84)
	invocacion_funcion : ID . '(' bloque_list_expresiones ')'  (85)
	invocacion_funcion : ID . '(' ')'  (86)
	invocacion_funcion : ID . '(' tipo_base '(' expresion ')' ')'  (87)

	ASIGNACION  shift 26
	'('  shift 27
	'['  shift 28
	ID  reduce 41
	FUN  reduce 41


state 5
	bloque_if : IF . '(' condicion ')' THEN cuerpo_if_unico fin_if  (93)
	bloque_if : IF . '(' condicion ')' THEN cuerpo_if_bloque fin_if  (94)
	bloque_if : IF . '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_unico fin_if  (95)
	bloque_if : IF . '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if  (96)
	bloque_if : IF . '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_bloque fin_if  (97)
	bloque_if : IF . '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_unico fin_if  (98)

	'('  shift 29
	.  error


state 6
	programa : ID BEGIN . list_sentencias END  (1)
	programa : ID BEGIN . list_sentencias  (3)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	list_sentencias  goto 30
	sentencia  goto 13
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24


state 7
	salida_mensaje : OUTF . '(' CADENA ')'  (120)
	salida_mensaje : OUTF . '(' expresion ')'  (121)
	salida_mensaje : OUTF . '(' ')'  (122)

	'('  shift 31
	.  error


state 8
	declaracion_tipo : TYPEDEF . TRIPLE '<' tipo_base '>' ID  (80)
	declaracion_tipo : TYPEDEF . TRIPLE '<' tipo_base '>' error  (81)
	declaracion_tipo : TYPEDEF . TRIPLE tipo_base '>' ID  (82)
	declaracion_tipo : TYPEDEF . TRIPLE '<' tipo_base ID  (83)

	TRIPLE  shift 32
	.  error


state 9
	tipo_base : ULONGINT .  (42)

	.  reduce 42


state 10
	tipo_base : SINGLE .  (43)

	.  reduce 43


state 11
	sentencia_control : FOR . '(' encabezado_for ')' bloque_sentencias_ejecutables  (20)
	sentencia_control : FOR . '(' encabezado_for ')' error  (21)
	sentencia_control : FOR . encabezado_for ')' bloque_sentencias_ejecutables  (22)
	sentencia_control : FOR . '(' encabezado_for bloque_sentencias_ejecutables  (23)

	ID  shift 33
	'('  shift 34
	.  error

	encabezado_for  goto 35
	encabezado_for1  goto 36
	encabezado_for2  goto 37


state 12
	programa : ID list_sentencias . END  (4)
	programa : ID list_sentencias .  (5)
	list_sentencias : list_sentencias . sentencia  (6)

	ID  shift 4
	IF  shift 5
	END  shift 38
	OUTF  shift 7
	TYPEDEF  shift 8
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	$end  reduce 5

	sentencia  goto 39
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24


state 13
	list_sentencias : sentencia .  (7)

	.  reduce 7


state 14
	sentencia : sentencia_declarativa . ';'  (8)
	sentencia : sentencia_declarativa .  (11)

	';'  shift 40
	$end  reduce 11
	ID  reduce 11
	IF  reduce 11
	END  reduce 11
	OUTF  reduce 11
	TYPEDEF  reduce 11
	RET  reduce 11
	ULONGINT  reduce 11
	SINGLE  reduce 11
	FOR  reduce 11


state 15
	sentencia : sentencia_ejecutable . ';'  (9)
	sentencia : sentencia_ejecutable .  (10)

	';'  shift 41
	$end  reduce 10
	ID  reduce 10
	IF  reduce 10
	END  reduce 10
	OUTF  reduce 10
	TYPEDEF  reduce 10
	RET  reduce 10
	ULONGINT  reduce 10
	SINGLE  reduce 10
	FOR  reduce 10


state 16
	sentencia_declarativa : tipo . list_variables  (12)
	declaracion_funcion : tipo . FUN ID '(' parametro ')' BEGIN $$1 cuerpo_funcion $$2 END  (48)
	declaracion_funcion : tipo . FUN ID '(' bloque_list_parametro ')' BEGIN cuerpo_funcion END  (49)
	declaracion_funcion : tipo . FUN '(' parametro ')' BEGIN cuerpo_funcion END  (50)
	declaracion_funcion : tipo . FUN ID '(' ')' BEGIN cuerpo_funcion END  (51)

	ID  shift 42
	FUN  shift 43
	.  error

	list_variables  goto 44


state 17
	sentencia_declarativa : declaracion_funcion .  (13)

	.  reduce 13


state 18
	sentencia_declarativa : declaracion_tipo .  (14)

	.  reduce 14


state 19
	sentencia_ejecutable : asignacion .  (15)

	.  reduce 15


state 20
	sentencia_ejecutable : invocacion_funcion .  (16)

	.  reduce 16


state 21
	sentencia_ejecutable : bloque_if .  (17)

	.  reduce 17


state 22
	sentencia_ejecutable : salida_mensaje .  (18)

	.  reduce 18


state 23
	sentencia_ejecutable : sentencia_control .  (19)

	.  reduce 19


state 24
	tipo : tipo_base .  (40)

	.  reduce 40


state 25
	programa : BEGIN list_sentencias . END  (2)
	list_sentencias : list_sentencias . sentencia  (6)

	ID  shift 4
	IF  shift 5
	END  shift 45
	OUTF  shift 7
	TYPEDEF  shift 8
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	sentencia  goto 39
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24


state 26
	asignacion : ID ASIGNACION . expresion  (37)
	asignacion : ID ASIGNACION . error  (39)

	error  shift 46
	ID  shift 47
	CONSTANTE  shift 48
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	expresion  goto 51
	termino  goto 52
	factor  goto 53


state 27
	invocacion_funcion : ID '(' . expresion ')'  (84)
	invocacion_funcion : ID '(' . bloque_list_expresiones ')'  (85)
	invocacion_funcion : ID '(' . ')'  (86)
	invocacion_funcion : ID '(' . tipo_base '(' expresion ')' ')'  (87)

	error  shift 54
	ID  shift 47
	CONSTANTE  shift 48
	ULONGINT  shift 9
	SINGLE  shift 10
	')'  shift 55
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	expresion  goto 56
	tipo_base  goto 57
	termino  goto 52
	factor  goto 53
	bloque_list_expresiones  goto 58
	list_expresiones  goto 59


state 28
	asignacion : ID '[' . CONSTANTE ']' ASIGNACION expresion  (38)

	CONSTANTE  shift 60
	.  error


state 29
	bloque_if : IF '(' . condicion ')' THEN cuerpo_if_unico fin_if  (93)
	bloque_if : IF '(' . condicion ')' THEN cuerpo_if_bloque fin_if  (94)
	bloque_if : IF '(' . condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_unico fin_if  (95)
	bloque_if : IF '(' . condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if  (96)
	bloque_if : IF '(' . condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_bloque fin_if  (97)
	bloque_if : IF '(' . condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_unico fin_if  (98)

	error  shift 61
	ID  shift 47
	CONSTANTE  shift 48
	'('  shift 62
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	condicion  goto 63
	expresion  goto 64
	termino  goto 52
	factor  goto 53


state 30
	programa : ID BEGIN list_sentencias . END  (1)
	programa : ID BEGIN list_sentencias .  (3)
	list_sentencias : list_sentencias . sentencia  (6)

	ID  shift 4
	IF  shift 5
	END  shift 65
	OUTF  shift 7
	TYPEDEF  shift 8
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	$end  reduce 3

	sentencia  goto 39
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24


state 31
	salida_mensaje : OUTF '(' . CADENA ')'  (120)
	salida_mensaje : OUTF '(' . expresion ')'  (121)
	salida_mensaje : OUTF '(' . ')'  (122)

	ID  shift 47
	CONSTANTE  shift 48
	CADENA  shift 66
	')'  shift 67
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	expresion  goto 68
	termino  goto 52
	factor  goto 53


state 32
	declaracion_tipo : TYPEDEF TRIPLE . '<' tipo_base '>' ID  (80)
	declaracion_tipo : TYPEDEF TRIPLE . '<' tipo_base '>' error  (81)
	declaracion_tipo : TYPEDEF TRIPLE . tipo_base '>' ID  (82)
	declaracion_tipo : TYPEDEF TRIPLE . '<' tipo_base ID  (83)

	ULONGINT  shift 9
	SINGLE  shift 10
	'<'  shift 69
	.  error

	tipo_base  goto 70


state 33
	encabezado_for1 : ID . ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE  (26)
	encabezado_for1 : ID . ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE  (27)
	encabezado_for1 : ID . ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE  (28)
	encabezado_for1 : ID . ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE  (29)
	encabezado_for2 : ID . ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (30)
	encabezado_for2 : ID . ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID . ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (32)
	encabezado_for2 : ID . ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE ';' '(' condicion ')'  (33)
	encabezado_for2 : ID . ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE '(' condicion ')'  (34)

	ASIGNACION  shift 71
	.  error


state 34
	sentencia_control : FOR '(' . encabezado_for ')' bloque_sentencias_ejecutables  (20)
	sentencia_control : FOR '(' . encabezado_for ')' error  (21)
	sentencia_control : FOR '(' . encabezado_for bloque_sentencias_ejecutables  (23)

	ID  shift 33
	.  error

	encabezado_for  goto 72
	encabezado_for1  goto 36
	encabezado_for2  goto 37


state 35
	sentencia_control : FOR encabezado_for . ')' bloque_sentencias_ejecutables  (22)

	')'  shift 73
	.  error


state 36
	encabezado_for : encabezado_for1 .  (24)

	.  reduce 24


state 37
	encabezado_for : encabezado_for2 .  (25)

	.  reduce 25


state 38
	programa : ID list_sentencias END .  (4)

	.  reduce 4


state 39
	list_sentencias : list_sentencias sentencia .  (6)

	.  reduce 6


state 40
	sentencia : sentencia_declarativa ';' .  (8)

	.  reduce 8


state 41
	sentencia : sentencia_ejecutable ';' .  (9)

	.  reduce 9


state 42
	list_variables : ID .  (45)

	.  reduce 45


state 43
	declaracion_funcion : tipo FUN . ID '(' parametro ')' BEGIN $$1 cuerpo_funcion $$2 END  (48)
	declaracion_funcion : tipo FUN . ID '(' bloque_list_parametro ')' BEGIN cuerpo_funcion END  (49)
	declaracion_funcion : tipo FUN . '(' parametro ')' BEGIN cuerpo_funcion END  (50)
	declaracion_funcion : tipo FUN . ID '(' ')' BEGIN cuerpo_funcion END  (51)

	ID  shift 74
	'('  shift 75
	.  error


state 44
	sentencia_declarativa : tipo list_variables .  (12)
	list_variables : list_variables . ',' ID  (44)

	','  shift 76
	$end  reduce 12
	ID  reduce 12
	IF  reduce 12
	END  reduce 12
	OUTF  reduce 12
	TYPEDEF  reduce 12
	RET  reduce 12
	ULONGINT  reduce 12
	SINGLE  reduce 12
	FOR  reduce 12
	';'  reduce 12


state 45
	programa : BEGIN list_sentencias END .  (2)

	.  reduce 2


state 46
	asignacion : ID ASIGNACION error .  (39)

	.  reduce 39


state 47
	factor : ID .  (73)
	factor : ID . '[' CONSTANTE ']'  (76)
	invocacion_funcion : ID . '(' expresion ')'  (84)
	invocacion_funcion : ID . '(' bloque_list_expresiones ')'  (85)
	invocacion_funcion : ID . '(' ')'  (86)
	invocacion_funcion : ID . '(' tipo_base '(' expresion ')' ')'  (87)

	'('  shift 27
	'['  shift 77
	$end  reduce 73
	error  reduce 73
	ID  reduce 73
	MAYORIGUAL  reduce 73
	MENORIGUAL  reduce 73
	DISTINTO  reduce 73
	IF  reduce 73
	END  reduce 73
	OUTF  reduce 73
	TYPEDEF  reduce 73
	RET  reduce 73
	ULONGINT  reduce 73
	SINGLE  reduce 73
	FOR  reduce 73
	UP  reduce 73
	DOWN  reduce 73
	';'  reduce 73
	')'  reduce 73
	','  reduce 73
	'+'  reduce 73
	'-'  reduce 73
	'*'  reduce 73
	'/'  reduce 73
	'<'  reduce 73
	'>'  reduce 73
	'='  reduce 73


state 48
	factor : CONSTANTE .  (74)

	.  reduce 74


state 49
	factor : '-' . ID  (77)
	factor : '-' . CONSTANTE  (78)
	factor : '-' . ID '[' CONSTANTE ']'  (79)

	ID  shift 78
	CONSTANTE  shift 79
	.  error


state 50
	factor : invocacion_funcion .  (75)

	.  reduce 75


state 51
	asignacion : ID ASIGNACION expresion .  (37)
	expresion : expresion . '+' termino  (63)
	expresion : expresion . '-' termino  (64)
	expresion : expresion . '+' error  (66)
	expresion : expresion . '-' error  (67)

	'+'  shift 80
	'-'  shift 81
	$end  reduce 37
	error  reduce 37
	ID  reduce 37
	IF  reduce 37
	END  reduce 37
	OUTF  reduce 37
	TYPEDEF  reduce 37
	RET  reduce 37
	ULONGINT  reduce 37
	SINGLE  reduce 37
	FOR  reduce 37
	';'  reduce 37


state 52
	expresion : termino .  (65)
	termino : termino . '*' factor  (68)
	termino : termino . '/' factor  (69)
	termino : termino . '*' error  (71)
	termino : termino . '/' error  (72)

	'*'  shift 82
	'/'  shift 83
	$end  reduce 65
	error  reduce 65
	ID  reduce 65
	MAYORIGUAL  reduce 65
	MENORIGUAL  reduce 65
	DISTINTO  reduce 65
	IF  reduce 65
	END  reduce 65
	OUTF  reduce 65
	TYPEDEF  reduce 65
	RET  reduce 65
	ULONGINT  reduce 65
	SINGLE  reduce 65
	FOR  reduce 65
	UP  reduce 65
	DOWN  reduce 65
	';'  reduce 65
	')'  reduce 65
	','  reduce 65
	'+'  reduce 65
	'-'  reduce 65
	'<'  reduce 65
	'>'  reduce 65
	'='  reduce 65


state 53
	termino : factor .  (70)

	.  reduce 70


state 54
	list_expresiones : error .  (119)

	.  reduce 119


state 55
	invocacion_funcion : ID '(' ')' .  (86)

	.  reduce 86


state 56
	expresion : expresion . '+' termino  (63)
	expresion : expresion . '-' termino  (64)
	expresion : expresion . '+' error  (66)
	expresion : expresion . '-' error  (67)
	invocacion_funcion : ID '(' expresion . ')'  (84)
	list_expresiones : expresion .  (118)

	')'  shift 84
	'+'  shift 80
	'-'  shift 81
	','  reduce 118


state 57
	invocacion_funcion : ID '(' tipo_base . '(' expresion ')' ')'  (87)

	'('  shift 85
	.  error


state 58
	invocacion_funcion : ID '(' bloque_list_expresiones . ')'  (85)

	')'  shift 86
	.  error


state 59
	bloque_list_expresiones : list_expresiones . ',' expresion  (116)
	list_expresiones : list_expresiones . ',' expresion  (117)

	','  shift 87
	.  error


state 60
	asignacion : ID '[' CONSTANTE . ']' ASIGNACION expresion  (38)

	']'  shift 88
	.  error


state 61
	condicion : error .  (115)

	.  reduce 115


state 62
	condicion : '(' . bloque_list_expresiones ')' comparacion '(' bloque_list_expresiones ')'  (114)

	error  shift 54
	ID  shift 47
	CONSTANTE  shift 48
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	expresion  goto 89
	termino  goto 52
	factor  goto 53
	bloque_list_expresiones  goto 90
	list_expresiones  goto 59


state 63
	bloque_if : IF '(' condicion . ')' THEN cuerpo_if_unico fin_if  (93)
	bloque_if : IF '(' condicion . ')' THEN cuerpo_if_bloque fin_if  (94)
	bloque_if : IF '(' condicion . ')' THEN cuerpo_if_unico ELSE cuerpo_if_unico fin_if  (95)
	bloque_if : IF '(' condicion . ')' THEN cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if  (96)
	bloque_if : IF '(' condicion . ')' THEN cuerpo_if_unico ELSE cuerpo_if_bloque fin_if  (97)
	bloque_if : IF '(' condicion . ')' THEN cuerpo_if_bloque ELSE cuerpo_if_unico fin_if  (98)

	')'  shift 91
	.  error


state 64
	expresion : expresion . '+' termino  (63)
	expresion : expresion . '-' termino  (64)
	expresion : expresion . '+' error  (66)
	expresion : expresion . '-' error  (67)
	condicion : expresion . comparacion expresion  (113)

	MAYORIGUAL  shift 92
	MENORIGUAL  shift 93
	DISTINTO  shift 94
	'+'  shift 80
	'-'  shift 81
	'<'  shift 95
	'>'  shift 96
	'='  shift 97
	.  error

	comparacion  goto 98


state 65
	programa : ID BEGIN list_sentencias END .  (1)

	.  reduce 1


state 66
	salida_mensaje : OUTF '(' CADENA . ')'  (120)

	')'  shift 99
	.  error


state 67
	salida_mensaje : OUTF '(' ')' .  (122)

	.  reduce 122


state 68
	expresion : expresion . '+' termino  (63)
	expresion : expresion . '-' termino  (64)
	expresion : expresion . '+' error  (66)
	expresion : expresion . '-' error  (67)
	salida_mensaje : OUTF '(' expresion . ')'  (121)

	')'  shift 100
	'+'  shift 80
	'-'  shift 81
	.  error


state 69
	declaracion_tipo : TYPEDEF TRIPLE '<' . tipo_base '>' ID  (80)
	declaracion_tipo : TYPEDEF TRIPLE '<' . tipo_base '>' error  (81)
	declaracion_tipo : TYPEDEF TRIPLE '<' . tipo_base ID  (83)

	ULONGINT  shift 9
	SINGLE  shift 10
	.  error

	tipo_base  goto 101


state 70
	declaracion_tipo : TYPEDEF TRIPLE tipo_base . '>' ID  (82)

	'>'  shift 102
	.  error


state 71
	encabezado_for1 : ID ASIGNACION . CONSTANTE ';' condicion ';' up_down CONSTANTE  (26)
	encabezado_for1 : ID ASIGNACION . CONSTANTE ';' condicion ';' CONSTANTE  (27)
	encabezado_for1 : ID ASIGNACION . CONSTANTE condicion ';' up_down CONSTANTE  (28)
	encabezado_for1 : ID ASIGNACION . CONSTANTE ';' condicion up_down CONSTANTE  (29)
	encabezado_for2 : ID ASIGNACION . CONSTANTE ';' condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (30)
	encabezado_for2 : ID ASIGNACION . CONSTANTE ';' condicion ';' CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID ASIGNACION . CONSTANTE condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (32)
	encabezado_for2 : ID ASIGNACION . CONSTANTE ';' condicion up_down CONSTANTE ';' '(' condicion ')'  (33)
	encabezado_for2 : ID ASIGNACION . CONSTANTE ';' condicion ';' up_down CONSTANTE '(' condicion ')'  (34)

	CONSTANTE  shift 103
	.  error


state 72
	sentencia_control : FOR '(' encabezado_for . ')' bloque_sentencias_ejecutables  (20)
	sentencia_control : FOR '(' encabezado_for . ')' error  (21)
	sentencia_control : FOR '(' encabezado_for . bloque_sentencias_ejecutables  (23)

	ID  shift 104
	IF  shift 5
	BEGIN  shift 105
	OUTF  shift 7
	FOR  shift 11
	')'  shift 106
	.  error

	sentencia_ejecutable  goto 107
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	bloque_sentencias_ejecutables  goto 108


state 73
	sentencia_control : FOR encabezado_for ')' . bloque_sentencias_ejecutables  (22)

	ID  shift 104
	IF  shift 5
	BEGIN  shift 105
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 107
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	bloque_sentencias_ejecutables  goto 109


state 74
	declaracion_funcion : tipo FUN ID . '(' parametro ')' BEGIN $$1 cuerpo_funcion $$2 END  (48)
	declaracion_funcion : tipo FUN ID . '(' bloque_list_parametro ')' BEGIN cuerpo_funcion END  (49)
	declaracion_funcion : tipo FUN ID . '(' ')' BEGIN cuerpo_funcion END  (51)

	'('  shift 110
	.  error


state 75
	declaracion_funcion : tipo FUN '(' . parametro ')' BEGIN cuerpo_funcion END  (50)

	ID  shift 111
	ULONGINT  shift 9
	SINGLE  shift 10
	.  error

	tipo  goto 112
	tipo_base  goto 24
	parametro  goto 113


state 76
	list_variables : list_variables ',' . ID  (44)

	ID  shift 114
	.  error


state 77
	factor : ID '[' . CONSTANTE ']'  (76)

	CONSTANTE  shift 115
	.  error


state 78
	factor : '-' ID .  (77)
	factor : '-' ID . '[' CONSTANTE ']'  (79)

	'['  shift 116
	$end  reduce 77
	error  reduce 77
	ID  reduce 77
	MAYORIGUAL  reduce 77
	MENORIGUAL  reduce 77
	DISTINTO  reduce 77
	IF  reduce 77
	END  reduce 77
	OUTF  reduce 77
	TYPEDEF  reduce 77
	RET  reduce 77
	ULONGINT  reduce 77
	SINGLE  reduce 77
	FOR  reduce 77
	UP  reduce 77
	DOWN  reduce 77
	';'  reduce 77
	')'  reduce 77
	','  reduce 77
	'+'  reduce 77
	'-'  reduce 77
	'*'  reduce 77
	'/'  reduce 77
	'<'  reduce 77
	'>'  reduce 77
	'='  reduce 77


state 79
	factor : '-' CONSTANTE .  (78)

	.  reduce 78


state 80
	expresion : expresion '+' . termino  (63)
	expresion : expresion '+' . error  (66)

	error  shift 117
	ID  shift 47
	CONSTANTE  shift 48
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	termino  goto 118
	factor  goto 53


state 81
	expresion : expresion '-' . termino  (64)
	expresion : expresion '-' . error  (67)

	error  shift 119
	ID  shift 47
	CONSTANTE  shift 48
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	termino  goto 120
	factor  goto 53


state 82
	termino : termino '*' . factor  (68)
	termino : termino '*' . error  (71)

	error  shift 121
	ID  shift 47
	CONSTANTE  shift 48
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	factor  goto 122


state 83
	termino : termino '/' . factor  (69)
	termino : termino '/' . error  (72)

	error  shift 123
	ID  shift 47
	CONSTANTE  shift 48
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	factor  goto 124


state 84
	invocacion_funcion : ID '(' expresion ')' .  (84)

	.  reduce 84


state 85
	invocacion_funcion : ID '(' tipo_base '(' . expresion ')' ')'  (87)

	ID  shift 47
	CONSTANTE  shift 48
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	expresion  goto 125
	termino  goto 52
	factor  goto 53


state 86
	invocacion_funcion : ID '(' bloque_list_expresiones ')' .  (85)

	.  reduce 85


state 87
	bloque_list_expresiones : list_expresiones ',' . expresion  (116)
	list_expresiones : list_expresiones ',' . expresion  (117)

	ID  shift 47
	CONSTANTE  shift 48
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	expresion  goto 126
	termino  goto 52
	factor  goto 53


state 88
	asignacion : ID '[' CONSTANTE ']' . ASIGNACION expresion  (38)

	ASIGNACION  shift 127
	.  error


state 89
	expresion : expresion . '+' termino  (63)
	expresion : expresion . '-' termino  (64)
	expresion : expresion . '+' error  (66)
	expresion : expresion . '-' error  (67)
	list_expresiones : expresion .  (118)

	'+'  shift 80
	'-'  shift 81
	','  reduce 118


state 90
	condicion : '(' bloque_list_expresiones . ')' comparacion '(' bloque_list_expresiones ')'  (114)

	')'  shift 128
	.  error


state 91
	bloque_if : IF '(' condicion ')' . THEN cuerpo_if_unico fin_if  (93)
	bloque_if : IF '(' condicion ')' . THEN cuerpo_if_bloque fin_if  (94)
	bloque_if : IF '(' condicion ')' . THEN cuerpo_if_unico ELSE cuerpo_if_unico fin_if  (95)
	bloque_if : IF '(' condicion ')' . THEN cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if  (96)
	bloque_if : IF '(' condicion ')' . THEN cuerpo_if_unico ELSE cuerpo_if_bloque fin_if  (97)
	bloque_if : IF '(' condicion ')' . THEN cuerpo_if_bloque ELSE cuerpo_if_unico fin_if  (98)

	THEN  shift 129
	.  error


state 92
	comparacion : MAYORIGUAL .  (107)

	.  reduce 107


state 93
	comparacion : MENORIGUAL .  (108)

	.  reduce 108


state 94
	comparacion : DISTINTO .  (109)

	.  reduce 109


state 95
	comparacion : '<' .  (112)

	.  reduce 112


state 96
	comparacion : '>' .  (111)

	.  reduce 111


state 97
	comparacion : '=' .  (110)

	.  reduce 110


state 98
	condicion : expresion comparacion . expresion  (113)

	ID  shift 47
	CONSTANTE  shift 48
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	expresion  goto 130
	termino  goto 52
	factor  goto 53


state 99
	salida_mensaje : OUTF '(' CADENA ')' .  (120)

	.  reduce 120


state 100
	salida_mensaje : OUTF '(' expresion ')' .  (121)

	.  reduce 121


state 101
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base . '>' ID  (80)
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base . '>' error  (81)
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base . ID  (83)

	ID  shift 131
	'>'  shift 132
	.  error


state 102
	declaracion_tipo : TYPEDEF TRIPLE tipo_base '>' . ID  (82)

	ID  shift 133
	.  error


state 103
	encabezado_for1 : ID ASIGNACION CONSTANTE . ';' condicion ';' up_down CONSTANTE  (26)
	encabezado_for1 : ID ASIGNACION CONSTANTE . ';' condicion ';' CONSTANTE  (27)
	encabezado_for1 : ID ASIGNACION CONSTANTE . condicion ';' up_down CONSTANTE  (28)
	encabezado_for1 : ID ASIGNACION CONSTANTE . ';' condicion up_down CONSTANTE  (29)
	encabezado_for2 : ID ASIGNACION CONSTANTE . ';' condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (30)
	encabezado_for2 : ID ASIGNACION CONSTANTE . ';' condicion ';' CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID ASIGNACION CONSTANTE . condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (32)
	encabezado_for2 : ID ASIGNACION CONSTANTE . ';' condicion up_down CONSTANTE ';' '(' condicion ')'  (33)
	encabezado_for2 : ID ASIGNACION CONSTANTE . ';' condicion ';' up_down CONSTANTE '(' condicion ')'  (34)

	error  shift 61
	ID  shift 47
	CONSTANTE  shift 48
	';'  shift 134
	'('  shift 62
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	condicion  goto 135
	expresion  goto 64
	termino  goto 52
	factor  goto 53


state 104
	asignacion : ID . ASIGNACION expresion  (37)
	asignacion : ID . '[' CONSTANTE ']' ASIGNACION expresion  (38)
	asignacion : ID . ASIGNACION error  (39)
	invocacion_funcion : ID . '(' expresion ')'  (84)
	invocacion_funcion : ID . '(' bloque_list_expresiones ')'  (85)
	invocacion_funcion : ID . '(' ')'  (86)
	invocacion_funcion : ID . '(' tipo_base '(' expresion ')' ')'  (87)

	ASIGNACION  shift 26
	'('  shift 27
	'['  shift 28
	.  error


state 105
	bloque_sentencias_ejecutables : BEGIN . list_sentencias_ejecutables END  (92)

	ID  shift 104
	IF  shift 5
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 136
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	list_sentencias_ejecutables  goto 137


state 106
	sentencia_control : FOR '(' encabezado_for ')' . bloque_sentencias_ejecutables  (20)
	sentencia_control : FOR '(' encabezado_for ')' . error  (21)

	error  shift 138
	ID  shift 104
	IF  shift 5
	BEGIN  shift 105
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 107
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	bloque_sentencias_ejecutables  goto 139


state 107
	bloque_sentencias_ejecutables : sentencia_ejecutable . ';'  (90)
	bloque_sentencias_ejecutables : sentencia_ejecutable . error  (91)

	error  shift 140
	';'  shift 141
	.  error


state 108
	sentencia_control : FOR '(' encabezado_for bloque_sentencias_ejecutables .  (23)

	.  reduce 23


state 109
	sentencia_control : FOR encabezado_for ')' bloque_sentencias_ejecutables .  (22)

	.  reduce 22


state 110
	declaracion_funcion : tipo FUN ID '(' . parametro ')' BEGIN $$1 cuerpo_funcion $$2 END  (48)
	declaracion_funcion : tipo FUN ID '(' . bloque_list_parametro ')' BEGIN cuerpo_funcion END  (49)
	declaracion_funcion : tipo FUN ID '(' . ')' BEGIN cuerpo_funcion END  (51)

	ID  shift 111
	ULONGINT  shift 9
	SINGLE  shift 10
	')'  shift 142
	.  error

	tipo  goto 112
	tipo_base  goto 24
	parametro  goto 143
	bloque_list_parametro  goto 144
	list_parametro  goto 145


state 111
	tipo : ID .  (41)
	parametro : ID .  (53)

	ID  reduce 41
	')'  reduce 53
	','  reduce 53


state 112
	parametro : tipo . ID  (52)

	ID  shift 146
	.  error


state 113
	declaracion_funcion : tipo FUN '(' parametro . ')' BEGIN cuerpo_funcion END  (50)

	')'  shift 147
	.  error


state 114
	list_variables : list_variables ',' ID .  (44)

	.  reduce 44


state 115
	factor : ID '[' CONSTANTE . ']'  (76)

	']'  shift 148
	.  error


state 116
	factor : '-' ID '[' . CONSTANTE ']'  (79)

	CONSTANTE  shift 149
	.  error


state 117
	expresion : expresion '+' error .  (66)

	.  reduce 66


state 118
	expresion : expresion '+' termino .  (63)
	termino : termino . '*' factor  (68)
	termino : termino . '/' factor  (69)
	termino : termino . '*' error  (71)
	termino : termino . '/' error  (72)

	'*'  shift 82
	'/'  shift 83
	$end  reduce 63
	error  reduce 63
	ID  reduce 63
	MAYORIGUAL  reduce 63
	MENORIGUAL  reduce 63
	DISTINTO  reduce 63
	IF  reduce 63
	END  reduce 63
	OUTF  reduce 63
	TYPEDEF  reduce 63
	RET  reduce 63
	ULONGINT  reduce 63
	SINGLE  reduce 63
	FOR  reduce 63
	UP  reduce 63
	DOWN  reduce 63
	';'  reduce 63
	')'  reduce 63
	','  reduce 63
	'+'  reduce 63
	'-'  reduce 63
	'<'  reduce 63
	'>'  reduce 63
	'='  reduce 63


state 119
	expresion : expresion '-' error .  (67)

	.  reduce 67


state 120
	expresion : expresion '-' termino .  (64)
	termino : termino . '*' factor  (68)
	termino : termino . '/' factor  (69)
	termino : termino . '*' error  (71)
	termino : termino . '/' error  (72)

	'*'  shift 82
	'/'  shift 83
	$end  reduce 64
	error  reduce 64
	ID  reduce 64
	MAYORIGUAL  reduce 64
	MENORIGUAL  reduce 64
	DISTINTO  reduce 64
	IF  reduce 64
	END  reduce 64
	OUTF  reduce 64
	TYPEDEF  reduce 64
	RET  reduce 64
	ULONGINT  reduce 64
	SINGLE  reduce 64
	FOR  reduce 64
	UP  reduce 64
	DOWN  reduce 64
	';'  reduce 64
	')'  reduce 64
	','  reduce 64
	'+'  reduce 64
	'-'  reduce 64
	'<'  reduce 64
	'>'  reduce 64
	'='  reduce 64


state 121
	termino : termino '*' error .  (71)

	.  reduce 71


state 122
	termino : termino '*' factor .  (68)

	.  reduce 68


state 123
	termino : termino '/' error .  (72)

	.  reduce 72


state 124
	termino : termino '/' factor .  (69)

	.  reduce 69


state 125
	expresion : expresion . '+' termino  (63)
	expresion : expresion . '-' termino  (64)
	expresion : expresion . '+' error  (66)
	expresion : expresion . '-' error  (67)
	invocacion_funcion : ID '(' tipo_base '(' expresion . ')' ')'  (87)

	')'  shift 150
	'+'  shift 80
	'-'  shift 81
	.  error


state 126
	expresion : expresion . '+' termino  (63)
	expresion : expresion . '-' termino  (64)
	expresion : expresion . '+' error  (66)
	expresion : expresion . '-' error  (67)
	bloque_list_expresiones : list_expresiones ',' expresion .  (116)
	list_expresiones : list_expresiones ',' expresion .  (117)

	'+'  shift 80
	'-'  shift 81
	')'  reduce 116
	','  reduce 117


state 127
	asignacion : ID '[' CONSTANTE ']' ASIGNACION . expresion  (38)

	ID  shift 47
	CONSTANTE  shift 48
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	expresion  goto 151
	termino  goto 52
	factor  goto 53


state 128
	condicion : '(' bloque_list_expresiones ')' . comparacion '(' bloque_list_expresiones ')'  (114)

	MAYORIGUAL  shift 92
	MENORIGUAL  shift 93
	DISTINTO  shift 94
	'<'  shift 95
	'>'  shift 96
	'='  shift 97
	.  error

	comparacion  goto 152


state 129
	bloque_if : IF '(' condicion ')' THEN . cuerpo_if_unico fin_if  (93)
	bloque_if : IF '(' condicion ')' THEN . cuerpo_if_bloque fin_if  (94)
	bloque_if : IF '(' condicion ')' THEN . cuerpo_if_unico ELSE cuerpo_if_unico fin_if  (95)
	bloque_if : IF '(' condicion ')' THEN . cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if  (96)
	bloque_if : IF '(' condicion ')' THEN . cuerpo_if_unico ELSE cuerpo_if_bloque fin_if  (97)
	bloque_if : IF '(' condicion ')' THEN . cuerpo_if_bloque ELSE cuerpo_if_unico fin_if  (98)

	error  shift 153
	ID  shift 104
	IF  shift 5
	BEGIN  shift 154
	OUTF  shift 7
	RET  shift 155
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 156
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	sentencia_return  goto 157
	list_sentencias_ejecutables  goto 158
	cuerpo_if_unico  goto 159
	cuerpo_if_bloque  goto 160


state 130
	expresion : expresion . '+' termino  (63)
	expresion : expresion . '-' termino  (64)
	expresion : expresion . '+' error  (66)
	expresion : expresion . '-' error  (67)
	condicion : expresion comparacion expresion .  (113)

	'+'  shift 80
	'-'  shift 81
	UP  reduce 113
	DOWN  reduce 113
	';'  reduce 113
	')'  reduce 113


state 131
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base ID .  (83)

	.  reduce 83


state 132
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base '>' . ID  (80)
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base '>' . error  (81)

	error  shift 161
	ID  shift 162
	.  error


state 133
	declaracion_tipo : TYPEDEF TRIPLE tipo_base '>' ID .  (82)

	.  reduce 82


state 134
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' . condicion ';' up_down CONSTANTE  (26)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' . condicion ';' CONSTANTE  (27)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' . condicion up_down CONSTANTE  (29)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' . condicion ';' up_down CONSTANTE ';' '(' condicion ')'  (30)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' . condicion ';' CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' . condicion up_down CONSTANTE ';' '(' condicion ')'  (33)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' . condicion ';' up_down CONSTANTE '(' condicion ')'  (34)

	error  shift 61
	ID  shift 47
	CONSTANTE  shift 48
	'('  shift 62
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	condicion  goto 163
	expresion  goto 64
	termino  goto 52
	factor  goto 53


state 135
	encabezado_for1 : ID ASIGNACION CONSTANTE condicion . ';' up_down CONSTANTE  (28)
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion . ';' up_down CONSTANTE ';' '(' condicion ')'  (32)

	';'  shift 164
	.  error


state 136
	list_sentencias_ejecutables : sentencia_ejecutable . ';'  (106)

	';'  shift 165
	.  error


state 137
	bloque_sentencias_ejecutables : BEGIN list_sentencias_ejecutables . END  (92)
	list_sentencias_ejecutables : list_sentencias_ejecutables . sentencia_ejecutable ';'  (105)

	ID  shift 104
	IF  shift 5
	END  shift 166
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 167
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23


state 138
	sentencia_control : FOR '(' encabezado_for ')' error .  (21)

	.  reduce 21


state 139
	sentencia_control : FOR '(' encabezado_for ')' bloque_sentencias_ejecutables .  (20)

	.  reduce 20


state 140
	bloque_sentencias_ejecutables : sentencia_ejecutable error .  (91)

	.  reduce 91


state 141
	bloque_sentencias_ejecutables : sentencia_ejecutable ';' .  (90)

	.  reduce 90


state 142
	declaracion_funcion : tipo FUN ID '(' ')' . BEGIN cuerpo_funcion END  (51)

	BEGIN  shift 168
	.  error


state 143
	declaracion_funcion : tipo FUN ID '(' parametro . ')' BEGIN $$1 cuerpo_funcion $$2 END  (48)
	list_parametro : parametro .  (55)

	')'  shift 169
	','  reduce 55


state 144
	declaracion_funcion : tipo FUN ID '(' bloque_list_parametro . ')' BEGIN cuerpo_funcion END  (49)

	')'  shift 170
	.  error


state 145
	bloque_list_parametro : list_parametro . ',' parametro  (54)
	list_parametro : list_parametro . ',' parametro  (56)

	','  shift 171
	.  error


state 146
	parametro : tipo ID .  (52)

	.  reduce 52


state 147
	declaracion_funcion : tipo FUN '(' parametro ')' . BEGIN cuerpo_funcion END  (50)

	BEGIN  shift 172
	.  error


state 148
	factor : ID '[' CONSTANTE ']' .  (76)

	.  reduce 76


state 149
	factor : '-' ID '[' CONSTANTE . ']'  (79)

	']'  shift 173
	.  error


state 150
	invocacion_funcion : ID '(' tipo_base '(' expresion ')' . ')'  (87)

	')'  shift 174
	.  error


state 151
	asignacion : ID '[' CONSTANTE ']' ASIGNACION expresion .  (38)
	expresion : expresion . '+' termino  (63)
	expresion : expresion . '-' termino  (64)
	expresion : expresion . '+' error  (66)
	expresion : expresion . '-' error  (67)

	'+'  shift 80
	'-'  shift 81
	$end  reduce 38
	error  reduce 38
	ID  reduce 38
	IF  reduce 38
	END  reduce 38
	OUTF  reduce 38
	TYPEDEF  reduce 38
	RET  reduce 38
	ULONGINT  reduce 38
	SINGLE  reduce 38
	FOR  reduce 38
	';'  reduce 38


state 152
	condicion : '(' bloque_list_expresiones ')' comparacion . '(' bloque_list_expresiones ')'  (114)

	'('  shift 175
	.  error


state 153
	cuerpo_if_bloque : error .  (104)

	.  reduce 104


state 154
	cuerpo_if_bloque : BEGIN . list_sentencias_ejecutables END  (101)
	cuerpo_if_bloque : BEGIN . error  (102)

	error  shift 176
	ID  shift 104
	IF  shift 5
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 136
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	list_sentencias_ejecutables  goto 177


state 155
	sentencia_return : RET . '(' expresion ')'  (62)

	'('  shift 178
	.  error


state 156
	cuerpo_if_unico : sentencia_ejecutable . ';'  (99)
	list_sentencias_ejecutables : sentencia_ejecutable . ';'  (106)

	';'  shift 179
	.  error


state 157
	cuerpo_if_unico : sentencia_return . ';'  (100)

	';'  shift 180
	.  error


state 158
	cuerpo_if_bloque : list_sentencias_ejecutables . END  (103)
	list_sentencias_ejecutables : list_sentencias_ejecutables . sentencia_ejecutable ';'  (105)

	ID  shift 104
	IF  shift 5
	END  shift 181
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 167
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23


state 159
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico . fin_if  (93)
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico . ELSE cuerpo_if_unico fin_if  (95)
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico . ELSE cuerpo_if_bloque fin_if  (97)

	error  shift 182
	ELSE  shift 183
	END_IF  shift 184
	.  error

	fin_if  goto 185


state 160
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque . fin_if  (94)
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque . ELSE cuerpo_if_bloque fin_if  (96)
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque . ELSE cuerpo_if_unico fin_if  (98)

	error  shift 182
	ELSE  shift 186
	END_IF  shift 184
	.  error

	fin_if  goto 187


state 161
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base '>' error .  (81)

	.  reduce 81


state 162
	declaracion_tipo : TYPEDEF TRIPLE '<' tipo_base '>' ID .  (80)

	.  reduce 80


state 163
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion . ';' up_down CONSTANTE  (26)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion . ';' CONSTANTE  (27)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion . up_down CONSTANTE  (29)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion . ';' up_down CONSTANTE ';' '(' condicion ')'  (30)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion . ';' CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion . up_down CONSTANTE ';' '(' condicion ')'  (33)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion . ';' up_down CONSTANTE '(' condicion ')'  (34)

	UP  shift 188
	DOWN  shift 189
	';'  shift 190
	.  error

	up_down  goto 191


state 164
	encabezado_for1 : ID ASIGNACION CONSTANTE condicion ';' . up_down CONSTANTE  (28)
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' . up_down CONSTANTE ';' '(' condicion ')'  (32)

	UP  shift 188
	DOWN  shift 189
	.  error

	up_down  goto 192


state 165
	list_sentencias_ejecutables : sentencia_ejecutable ';' .  (106)

	.  reduce 106


state 166
	bloque_sentencias_ejecutables : BEGIN list_sentencias_ejecutables END .  (92)

	.  reduce 92


state 167
	list_sentencias_ejecutables : list_sentencias_ejecutables sentencia_ejecutable . ';'  (105)

	';'  shift 193
	.  error


state 168
	declaracion_funcion : tipo FUN ID '(' ')' BEGIN . cuerpo_funcion END  (51)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	RET  shift 155
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	sentencia  goto 194
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24
	cuerpo_funcion  goto 195
	list_sentencias_funcion  goto 196
	sentencia_return  goto 197


state 169
	declaracion_funcion : tipo FUN ID '(' parametro ')' . BEGIN $$1 cuerpo_funcion $$2 END  (48)

	BEGIN  shift 198
	.  error


state 170
	declaracion_funcion : tipo FUN ID '(' bloque_list_parametro ')' . BEGIN cuerpo_funcion END  (49)

	BEGIN  shift 199
	.  error


state 171
	bloque_list_parametro : list_parametro ',' . parametro  (54)
	list_parametro : list_parametro ',' . parametro  (56)

	ID  shift 111
	ULONGINT  shift 9
	SINGLE  shift 10
	.  error

	tipo  goto 112
	tipo_base  goto 24
	parametro  goto 200


state 172
	declaracion_funcion : tipo FUN '(' parametro ')' BEGIN . cuerpo_funcion END  (50)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	RET  shift 155
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	sentencia  goto 194
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24
	cuerpo_funcion  goto 201
	list_sentencias_funcion  goto 196
	sentencia_return  goto 197


state 173
	factor : '-' ID '[' CONSTANTE ']' .  (79)

	.  reduce 79


state 174
	invocacion_funcion : ID '(' tipo_base '(' expresion ')' ')' .  (87)

	.  reduce 87


state 175
	condicion : '(' bloque_list_expresiones ')' comparacion '(' . bloque_list_expresiones ')'  (114)

	error  shift 54
	ID  shift 47
	CONSTANTE  shift 48
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	expresion  goto 89
	termino  goto 52
	factor  goto 53
	bloque_list_expresiones  goto 202
	list_expresiones  goto 59


state 176
	cuerpo_if_bloque : BEGIN error .  (102)

	.  reduce 102


state 177
	cuerpo_if_bloque : BEGIN list_sentencias_ejecutables . END  (101)
	list_sentencias_ejecutables : list_sentencias_ejecutables . sentencia_ejecutable ';'  (105)

	ID  shift 104
	IF  shift 5
	END  shift 203
	OUTF  shift 7
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 167
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23


state 178
	sentencia_return : RET '(' . expresion ')'  (62)

	ID  shift 47
	CONSTANTE  shift 48
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	expresion  goto 204
	termino  goto 52
	factor  goto 53


state 179
	cuerpo_if_unico : sentencia_ejecutable ';' .  (99)
	list_sentencias_ejecutables : sentencia_ejecutable ';' .  (106)

	error  reduce 99
	ID  reduce 106
	IF  reduce 106
	ELSE  reduce 99
	END  reduce 106
	END_IF  reduce 99
	OUTF  reduce 106
	FOR  reduce 106


state 180
	cuerpo_if_unico : sentencia_return ';' .  (100)

	.  reduce 100


state 181
	cuerpo_if_bloque : list_sentencias_ejecutables END .  (103)

	.  reduce 103


state 182
	fin_if : error .  (89)

	.  reduce 89


state 183
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico ELSE . cuerpo_if_unico fin_if  (95)
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico ELSE . cuerpo_if_bloque fin_if  (97)

	error  shift 153
	ID  shift 104
	IF  shift 5
	BEGIN  shift 154
	OUTF  shift 7
	RET  shift 155
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 156
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	sentencia_return  goto 157
	list_sentencias_ejecutables  goto 158
	cuerpo_if_unico  goto 205
	cuerpo_if_bloque  goto 206


state 184
	fin_if : END_IF .  (88)

	.  reduce 88


state 185
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico fin_if .  (93)

	.  reduce 93


state 186
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque ELSE . cuerpo_if_bloque fin_if  (96)
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque ELSE . cuerpo_if_unico fin_if  (98)

	error  shift 153
	ID  shift 104
	IF  shift 5
	BEGIN  shift 154
	OUTF  shift 7
	RET  shift 155
	FOR  shift 11
	.  error

	sentencia_ejecutable  goto 156
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	sentencia_return  goto 157
	list_sentencias_ejecutables  goto 158
	cuerpo_if_unico  goto 207
	cuerpo_if_bloque  goto 208


state 187
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque fin_if .  (94)

	.  reduce 94


state 188
	up_down : UP .  (35)

	.  reduce 35


state 189
	up_down : DOWN .  (36)

	.  reduce 36


state 190
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' . up_down CONSTANTE  (26)
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' . CONSTANTE  (27)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' . up_down CONSTANTE ';' '(' condicion ')'  (30)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' . CONSTANTE ';' '(' condicion ')'  (31)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' . up_down CONSTANTE '(' condicion ')'  (34)

	CONSTANTE  shift 209
	UP  shift 188
	DOWN  shift 189
	.  error

	up_down  goto 210


state 191
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion up_down . CONSTANTE  (29)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion up_down . CONSTANTE ';' '(' condicion ')'  (33)

	CONSTANTE  shift 211
	.  error


state 192
	encabezado_for1 : ID ASIGNACION CONSTANTE condicion ';' up_down . CONSTANTE  (28)
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' up_down . CONSTANTE ';' '(' condicion ')'  (32)

	CONSTANTE  shift 212
	.  error


state 193
	list_sentencias_ejecutables : list_sentencias_ejecutables sentencia_ejecutable ';' .  (105)

	.  reduce 105


state 194
	list_sentencias_funcion : sentencia .  (61)

	.  reduce 61


state 195
	declaracion_funcion : tipo FUN ID '(' ')' BEGIN cuerpo_funcion . END  (51)

	END  shift 213
	.  error


state 196
	cuerpo_funcion : list_sentencias_funcion . sentencia_return ';'  (57)
	cuerpo_funcion : list_sentencias_funcion .  (58)
	list_sentencias_funcion : list_sentencias_funcion . sentencia  (60)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	RET  shift 155
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	END  reduce 58

	sentencia  goto 214
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24
	sentencia_return  goto 215


state 197
	cuerpo_funcion : sentencia_return . ';'  (59)

	';'  shift 216
	.  error


state 198
	declaracion_funcion : tipo FUN ID '(' parametro ')' BEGIN . $$1 cuerpo_funcion $$2 END  (48)
	$$1 : .  (46)

	.  reduce 46

	$$1  goto 217


state 199
	declaracion_funcion : tipo FUN ID '(' bloque_list_parametro ')' BEGIN . cuerpo_funcion END  (49)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	RET  shift 155
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	sentencia  goto 194
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24
	cuerpo_funcion  goto 218
	list_sentencias_funcion  goto 196
	sentencia_return  goto 197


state 200
	bloque_list_parametro : list_parametro ',' parametro .  (54)
	list_parametro : list_parametro ',' parametro .  (56)

	')'  reduce 54
	','  reduce 56


state 201
	declaracion_funcion : tipo FUN '(' parametro ')' BEGIN cuerpo_funcion . END  (50)

	END  shift 219
	.  error


state 202
	condicion : '(' bloque_list_expresiones ')' comparacion '(' bloque_list_expresiones . ')'  (114)

	')'  shift 220
	.  error


state 203
	cuerpo_if_bloque : BEGIN list_sentencias_ejecutables END .  (101)

	.  reduce 101


state 204
	sentencia_return : RET '(' expresion . ')'  (62)
	expresion : expresion . '+' termino  (63)
	expresion : expresion . '-' termino  (64)
	expresion : expresion . '+' error  (66)
	expresion : expresion . '-' error  (67)

	')'  shift 221
	'+'  shift 80
	'-'  shift 81
	.  error


state 205
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_unico . fin_if  (95)

	error  shift 182
	END_IF  shift 184
	.  error

	fin_if  goto 222


state 206
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_bloque . fin_if  (97)

	error  shift 182
	END_IF  shift 184
	.  error

	fin_if  goto 223


state 207
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_unico . fin_if  (98)

	error  shift 182
	END_IF  shift 184
	.  error

	fin_if  goto 224


state 208
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_bloque . fin_if  (96)

	error  shift 182
	END_IF  shift 184
	.  error

	fin_if  goto 225


state 209
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE .  (27)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE . ';' '(' condicion ')'  (31)

	';'  shift 226
	ID  reduce 27
	IF  reduce 27
	BEGIN  reduce 27
	OUTF  reduce 27
	FOR  reduce 27
	')'  reduce 27


state 210
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down . CONSTANTE  (26)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down . CONSTANTE ';' '(' condicion ')'  (30)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down . CONSTANTE '(' condicion ')'  (34)

	CONSTANTE  shift 227
	.  error


state 211
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE .  (29)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE . ';' '(' condicion ')'  (33)

	';'  shift 228
	ID  reduce 29
	IF  reduce 29
	BEGIN  reduce 29
	OUTF  reduce 29
	FOR  reduce 29
	')'  reduce 29


state 212
	encabezado_for1 : ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE .  (28)
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE . ';' '(' condicion ')'  (32)

	';'  shift 229
	ID  reduce 28
	IF  reduce 28
	BEGIN  reduce 28
	OUTF  reduce 28
	FOR  reduce 28
	')'  reduce 28


state 213
	declaracion_funcion : tipo FUN ID '(' ')' BEGIN cuerpo_funcion END .  (51)

	.  reduce 51


state 214
	list_sentencias_funcion : list_sentencias_funcion sentencia .  (60)

	.  reduce 60


state 215
	cuerpo_funcion : list_sentencias_funcion sentencia_return . ';'  (57)

	';'  shift 230
	.  error


state 216
	cuerpo_funcion : sentencia_return ';' .  (59)

	.  reduce 59


state 217
	declaracion_funcion : tipo FUN ID '(' parametro ')' BEGIN $$1 . cuerpo_funcion $$2 END  (48)

	ID  shift 4
	IF  shift 5
	OUTF  shift 7
	TYPEDEF  shift 8
	RET  shift 155
	ULONGINT  shift 9
	SINGLE  shift 10
	FOR  shift 11
	.  error

	sentencia  goto 194
	sentencia_declarativa  goto 14
	sentencia_ejecutable  goto 15
	tipo  goto 16
	declaracion_funcion  goto 17
	declaracion_tipo  goto 18
	asignacion  goto 19
	invocacion_funcion  goto 20
	bloque_if  goto 21
	salida_mensaje  goto 22
	sentencia_control  goto 23
	tipo_base  goto 24
	cuerpo_funcion  goto 231
	list_sentencias_funcion  goto 196
	sentencia_return  goto 197


state 218
	declaracion_funcion : tipo FUN ID '(' bloque_list_parametro ')' BEGIN cuerpo_funcion . END  (49)

	END  shift 232
	.  error


state 219
	declaracion_funcion : tipo FUN '(' parametro ')' BEGIN cuerpo_funcion END .  (50)

	.  reduce 50


state 220
	condicion : '(' bloque_list_expresiones ')' comparacion '(' bloque_list_expresiones ')' .  (114)

	.  reduce 114


state 221
	sentencia_return : RET '(' expresion ')' .  (62)

	.  reduce 62


state 222
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_unico fin_if .  (95)

	.  reduce 95


state 223
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_unico ELSE cuerpo_if_bloque fin_if .  (97)

	.  reduce 97


state 224
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_unico fin_if .  (98)

	.  reduce 98


state 225
	bloque_if : IF '(' condicion ')' THEN cuerpo_if_bloque ELSE cuerpo_if_bloque fin_if .  (96)

	.  reduce 96


state 226
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE ';' . '(' condicion ')'  (31)

	'('  shift 233
	.  error


state 227
	encabezado_for1 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE .  (26)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE . ';' '(' condicion ')'  (30)
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE . '(' condicion ')'  (34)

	';'  shift 234
	'('  shift 235
	ID  reduce 26
	IF  reduce 26
	BEGIN  reduce 26
	OUTF  reduce 26
	FOR  reduce 26
	')'  reduce 26


state 228
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE ';' . '(' condicion ')'  (33)

	'('  shift 236
	.  error


state 229
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE ';' . '(' condicion ')'  (32)

	'('  shift 237
	.  error


state 230
	cuerpo_funcion : list_sentencias_funcion sentencia_return ';' .  (57)

	.  reduce 57


state 231
	declaracion_funcion : tipo FUN ID '(' parametro ')' BEGIN $$1 cuerpo_funcion . $$2 END  (48)
	$$2 : .  (47)

	.  reduce 47

	$$2  goto 238


state 232
	declaracion_funcion : tipo FUN ID '(' bloque_list_parametro ')' BEGIN cuerpo_funcion END .  (49)

	.  reduce 49


state 233
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE ';' '(' . condicion ')'  (31)

	error  shift 61
	ID  shift 47
	CONSTANTE  shift 48
	'('  shift 62
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	condicion  goto 239
	expresion  goto 64
	termino  goto 52
	factor  goto 53


state 234
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE ';' . '(' condicion ')'  (30)

	'('  shift 240
	.  error


state 235
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE '(' . condicion ')'  (34)

	error  shift 61
	ID  shift 47
	CONSTANTE  shift 48
	'('  shift 62
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	condicion  goto 241
	expresion  goto 64
	termino  goto 52
	factor  goto 53


state 236
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE ';' '(' . condicion ')'  (33)

	error  shift 61
	ID  shift 47
	CONSTANTE  shift 48
	'('  shift 62
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	condicion  goto 242
	expresion  goto 64
	termino  goto 52
	factor  goto 53


state 237
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE ';' '(' . condicion ')'  (32)

	error  shift 61
	ID  shift 47
	CONSTANTE  shift 48
	'('  shift 62
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	condicion  goto 243
	expresion  goto 64
	termino  goto 52
	factor  goto 53


state 238
	declaracion_funcion : tipo FUN ID '(' parametro ')' BEGIN $$1 cuerpo_funcion $$2 . END  (48)

	END  shift 244
	.  error


state 239
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE ';' '(' condicion . ')'  (31)

	')'  shift 245
	.  error


state 240
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE ';' '(' . condicion ')'  (30)

	error  shift 61
	ID  shift 47
	CONSTANTE  shift 48
	'('  shift 62
	'-'  shift 49
	.  error

	invocacion_funcion  goto 50
	condicion  goto 246
	expresion  goto 64
	termino  goto 52
	factor  goto 53


state 241
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE '(' condicion . ')'  (34)

	')'  shift 247
	.  error


state 242
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE ';' '(' condicion . ')'  (33)

	')'  shift 248
	.  error


state 243
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE ';' '(' condicion . ')'  (32)

	')'  shift 249
	.  error


state 244
	declaracion_funcion : tipo FUN ID '(' parametro ')' BEGIN $$1 cuerpo_funcion $$2 END .  (48)

	.  reduce 48


state 245
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' CONSTANTE ';' '(' condicion ')' .  (31)

	.  reduce 31


state 246
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE ';' '(' condicion . ')'  (30)

	')'  shift 250
	.  error


state 247
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE '(' condicion ')' .  (34)

	.  reduce 34


state 248
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion up_down CONSTANTE ';' '(' condicion ')' .  (33)

	.  reduce 33


state 249
	encabezado_for2 : ID ASIGNACION CONSTANTE condicion ';' up_down CONSTANTE ';' '(' condicion ')' .  (32)

	.  reduce 32


state 250
	encabezado_for2 : ID ASIGNACION CONSTANTE ';' condicion ';' up_down CONSTANTE ';' '(' condicion ')' .  (30)

	.  reduce 30


39 terminals, 40 nonterminals
123 grammar rules, 251 states
