Habria que hacer en gramatica.y las siguientes variables y estructuras:
Si me olvido de algo, agregar porfiss


- Lista de funciones declaradas, para sobrecarga de metodos
    Pueden haber funciones en el mismo ambito, con el mismo nombre, pero el parametro de distinto tipo

- Variable de ambito actual, para luego manejar name-mangling chungling hoo lee shit

- Ahora en asignaciones, hay que controlar los tipos de los nodos

- Controlar conversiones y tipos predominantes (si opero con un int y un long, se pasa a long, etc)

## REGLAS GRAMATICALES Y TIPOS DE NODOS QUE GENERAN

// Nodos hoja

    Factor:
        ID
        CONSTANTE
        - CONSTANTE
        ID [ CONSTANTE ]
        - ID [ CONSTANTE ]

    Comparacion:
        MAYORIGUAL, MENORIGUAL, DISTINTO, '=', '>', '<'

    Tipo_base:
        ULONGINT
        SINGLE

    Up_down:
        UP
        DOWN

    Salida_mensaje:
        OUTF ( CADENA )
        OUTF ( expresion )

    Parametros y variables individuales en algunas producciones:

    ID en producciones como list_variables, parametro, y asignacion (cuando el identificador es una variable Ãºnica, sin hijos adicionales)

// Nodos comunes

    programa
        : list_sentencias
    ;

    list_sentencias
        : list_sentencias sentencia
        | sentencia
    ;

    sentencia
        : asignacion
        | sentencia_control
    ;

    sentencia_control
        : FOR '(' encabezado_for ')' bloque_sentencias_ejecutables
    ;

    encabezado_for
        : ID '=' expresion TO expresion
        | ID '=' expresion TO expresion STEP expresion
    ;

    asignacion
        : ID '=' expresion
    ;

    expresion
        : expresion '+' termino
        | expresion '-' termino
        | termino
    ;

    termino
        : termino '*' factor
        | termino '/' factor
        | factor
    ;

    condicion
        : expresion comparador expresion
        | '(' bloque_list_expresiones ')'
    ;